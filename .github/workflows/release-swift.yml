name: Release Swift Package
run-name: Release Swift Build ${{ inputs.build-run-number }}

on:
  workflow_dispatch:
    inputs:
      build-run-id:
        description: "Workflow Run ID to use for artifact download. If not provided the latest build from the selected branch will be used."
        type: string
        required: true
      build-run-number:
        description: "Build Run Number"
        type: string
        required: true
      update-ios-repo:
        description: "Update iOS Repo - Opens a PR updating the SDK in bitwarden/ios"
        type: boolean
        default: false

jobs:
  validate:
    name: Set Version and SHA
    runs-on: ubuntu-24.04
    permissions:
      contents: read
    outputs:
      version: ${{ steps.version.outputs.version }}
      sha: ${{ steps.set-sha.outputs.sha }}
      short_sha: ${{ steps.set-sha.outputs.short_sha }}
      release_name: ${{ steps.set-release-name.outputs.release_name }}
      swift_checksum: ${{ steps.calculate-swift-checksum.outputs.checksum }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get version
        id: version
        run: |
          VERSION=$(grep -o '^version = ".*"' Cargo.toml | grep -Eo "[0-9]+\.[0-9]+\.[0-9]+")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download BitwardenEFI artifact
        uses: bitwarden/gh-actions/download-artifacts@main
        id: download-artifact
        with:
          workflow: build-swift.yml
          workflow_conclusion: success
          skip_unpack: true
          run_id: ${{ inputs.build-run-id }}

      - name: Set SHA
        id: set-sha
        run: |
          echo "sha=${{ steps.download-artifact.outputs.artifact-build-commit }}" >> $GITHUB_OUTPUT
          echo "short_sha=$(echo ${{ steps.download-artifact.outputs.artifact-build-commit }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Set release name
        id: set-release-name
        env:
          _BUILD_RUN_NUMBER: ${{ inputs.build-run-number }}
          _SHORT_SHA: ${{ steps.set-sha.outputs.short_sha }}
          _VERSION: ${{ steps.version.outputs.version }}
        run: |
          RELEASE_NAME="$_VERSION-$_BUILD_RUN_NUMBER-$_SHORT_SHA"
          echo "ðŸ‘€ Release name: $RELEASE_NAME"
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT

      - name: Calculate swift file checksum
        id: calculate-swift-checksum
        run: |
          CHECKSUM=$(swift package compute-checksum BitwardenFFI-${{ steps.version.outputs.version }}-${{ steps.set-sha.outputs.short_sha }}.xcframework.zip)
          echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT

  repo-sync:
    name: Push changed files to SDK Swift repo and create GitHub
    runs-on: ubuntu-24.04
    needs: validate
    permissions:
      contents: read
      id-token: write
    env:
      _BOT_EMAIL: 178206702+bw-ghapp[bot]@users.noreply.github.com
      _BOT_NAME: bw-ghapp[bot]
      _PKG_VERSION: ${{ needs.validate.outputs.version }}
      _RELEASE_NAME: ${{ needs.validate.outputs.release_name }}
      _SWIFT_CHECKSUM: ${{ needs.validate.outputs.swift_checksum }}
      _BUILD_RUN_ID: ${{ inputs.build-run-id }}
      _BRANCH_NAME: unstable
    steps:
      - name: Checkout SDK repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          path: sdk

      - name: Log in to Azure
        uses: bitwarden/gh-actions/azure-login@main
        with:
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Get Azure Key Vault secrets
        id: get-kv-secrets
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: gh-org-bitwarden
          secrets: "BW-GHAPP-ID,BW-GHAPP-KEY"

      - name: Log out from Azure
        uses: bitwarden/gh-actions/azure-logout@main

      - name: Generate GH App token
        uses: actions/create-github-app-token@0f859bf9e69e887678d5bbfbee594437cb440ffe # v2.1.1
        id: app-token
        with:
          app-id: ${{ steps.get-kv-secrets.outputs.BW-GHAPP-ID }}
          private-key: ${{ steps.get-kv-secrets.outputs.BW-GHAPP-KEY }}
          owner: bitwarden
          repositories: sdk-swift
          permission-contents: write # used to: push code; create github release

      - name: Checkout SDK-Swift repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: bitwarden/sdk-swift
          path: sdk-swift
          ref: ${{ env._BRANCH_NAME }}
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup Git
        working-directory: sdk-swift
        run: |
          git config --local user.email "${{ env._BOT_EMAIL }}"
          git config --local user.name "${{ env._BOT_NAME }}"

      - name: Download BitwardenSdk sources artifact
        uses: bitwarden/gh-actions/download-artifacts@main
        id: download-artifact
        with:
          workflow: build-swift.yml
          workflow_conclusion: success
          artifacts: "BitwardenSdk-${{ env._PKG_VERSION }}-${{ needs.validate.outputs.short_sha }}-sources"
          run_id: ${{ env._BUILD_RUN_ID }}
          path: sdk/crates/bitwarden-uniffi/swift/Sources/BitwardenSdk

      - name: Install Swift formatter
        run: |
          git clone https://github.com/nicklockwood/SwiftFormat
          cd SwiftFormat
          swift build -c release
          cp -f .build/release/swiftformat /usr/local/bin/swiftformat

      - name: Update files
        run: |
          # Update BitwardenFFI path
          sed -i 's|.binaryTarget(name: "BitwardenFFI", path: "BitwardenFFI.xcframework")|.binaryTarget(\
            name: "BitwardenFFI",\
            url: "https://github.com/bitwarden/sdk-swift/releases/download/v${{ env._RELEASE_NAME }}/BitwardenFFI-${{ env._PKG_VERSION }}-${{ needs.validate.outputs.short_sha }}.xcframework.zip",\
            checksum: "${{ env._SWIFT_CHECKSUM }}" )|' sdk/crates/bitwarden-uniffi/swift/Package.swift

          # Run swiftformat
          swiftformat sdk/crates/bitwarden-uniffi/swift/Package.swift

          find sdk/crates/bitwarden-uniffi/swift/Sources/ -name ".gitignore" -exec rm -f {} \;

          rm -rf sdk-swift/Sources
          rm -rf sdk-swift/Tests

          # Copy files to local sdk-swift repo path
          cp --verbose -rf sdk/crates/bitwarden-uniffi/swift/README.md sdk-swift/README.md
          cp --verbose -rf sdk/crates/bitwarden-uniffi/swift/Package.swift sdk-swift/Package.swift
          cp --verbose -rf sdk/crates/bitwarden-uniffi/swift/Sources sdk-swift
          cp --verbose -rf sdk/crates/bitwarden-uniffi/swift/Tests sdk-swift

      - name: Push changes
        id: push-changes
        working-directory: sdk-swift
        run: |
          git add .
          git commit -m "Update Swift SDK to ${{ needs.validate.outputs.sha }}"
          git push origin ${{ env._BRANCH_NAME }}
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "ðŸ‘€ Commit hash: $COMMIT_HASH"
          echo "commit-hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Create release tag on SDK Swift repo
        working-directory: sdk-swift
        run: |
          git tag v${{ env._RELEASE_NAME }}
          git push origin v${{ env._RELEASE_NAME }}

      - name: Download BitwardenFFI artifact
        uses: bitwarden/gh-actions/download-artifacts@main
        id: download-artifact-ffi
        with:
          workflow: build-swift.yml
          workflow_conclusion: success
          artifacts: "BitwardenFFI-${{ env._PKG_VERSION }}-${{ needs.validate.outputs.short_sha }}.xcframework"
          run_id: ${{ env._BUILD_RUN_ID }}
          skip_unpack: true

      - name: Create release
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          _RELEASE_NAME: ${{ env._RELEASE_NAME }}
          _PKG_VERSION: ${{ env._PKG_VERSION }}
          _SHORT_SHA: ${{ needs.validate.outputs.short_sha }}
        run: |
          gh release create "v$_RELEASE_NAME" \
            --repo bitwarden/sdk-swift \
            --title "v$_RELEASE_NAME" \
            --notes "" \
            --prerelease \
            "BitwardenFFI-$_PKG_VERSION-$_SHORT_SHA.xcframework.zip"

      - name: Trigger SDK Update in iOS repo
        if: inputs.update-ios-repo
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          _SDK_SWIFT_REF: ${{ steps.push-changes.outputs.commit-hash }}
        run: |
          echo "ðŸš€ Triggering sdlc-sdk-update.yml workflow in bitwarden/ios repo..."
          gh workflow run sdlc-sdk-update.yml --repo bitwarden/ios --ref main -f run-mode=Update -f sdk-version=$_RELEASE_NAME -f sdk-swift-ref=$_SDK_SWIFT_REF

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

android {
    namespace = 'com.bitwarden.sdk'
    compileSdk = 35

    defaultConfig {
        minSdk = 28
        targetSdk = 35

        testInstrumentationRunner = 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lint {
        baseline = file('lint-baseline.xml')
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
        }
    }
}

String composeDescription() {
    def fullCommit = 'git rev-parse HEAD'.execute().text.trim()
    def changelog = 'git log -1 --oneline'.execute().text.trim()
    def workflowRunId = System.getenv('GITHUB_RUN_ID') ?: "local"

    def workflowRunUrl = workflowRunId == "local" ? "local" : "https://github.com/bitwarden/sdk-internal/actions/runs/${workflowRunId}"

    return """Full commit hash: ${fullCommit}
Workflow run link: ${workflowRunUrl}
Changelog: ${changelog}"""
}

String composeVersion(String branchName){
    // Determine the version from the git history.
    //
    // PRs: use the branch name.
    // Main: Grab it from `crates/bitwarden/Cargo.toml`
    def shortCommitHash = 'git rev-parse --short HEAD'.execute().text.trim()
    def workflowRunNumber = System.getenv('GITHUB_RUN_NUMBER') ?: "local"

    def content = ['grep', '-o', '^version = ".*"', rootDir.toString() + '/../../../Cargo.toml'].execute().text.trim()
    def match = ~/version = "(.*)"/
    def matcher = match.matcher(content)
    matcher.find()

   return branchName == 'main'
        //main branch → 1.0.0-{workflow_run_number}-{short_commit_hash} → 1.0.0-12-h48319
        ? "${matcher.group(1)}-${workflowRunNumber}-${shortCommitHash}"
        //other branches → 1.0.0-{workflow_run_number}-{branch_name} → 1.0.0-14-feat-something
        : "${matcher.group(1)}-${workflowRunNumber}-${branchName.replaceAll('/', '-')}"
}

publishing {
    publications {
        maven(MavenPublication) {
            def branchName = 'git branch --show-current'.execute().text.trim()
            groupId = 'com.bitwarden'
            
            artifactId = branchName == 'main' 
                //main branch: sdk-android
                ? 'sdk-android' 
                //other branches: sdk-android.dev
                : 'sdk-android.dev'

            def aboutThisPackage = composeDescription()

            if (findProperty('version') == 'unspecified') {
                version = composeVersion(branchName)
            }

            // changelog, full commit hash, workflow run link
            pom {
                name.set("Bitwarden SDK for Android")
                description.set(aboutThisPackage)
                url.set("https://github.com/bitwarden/sdk-internal")
            }

            afterEvaluate {
                from components.release
            }
        }
    }
    
    repositories {
        maven {
            name = 'GitHubPackages'
            url = 'https://maven.pkg.github.com/bitwarden/sdk-internal'
            credentials {
                username = System.getenv('GITHUB_ACTOR')
                password = System.getenv('GITHUB_TOKEN')
            }
        }
    }
}

// Find and include the classes.jar from platform-verifier.
//
// Based on the instructions from the readme in https://github.com/rustls/rustls-platform-verifier
// and issue details from https://github.com/rustls/rustls-platform-verifier/issues/115.
File findRustlsPlatformVerifierClassesJar() {
    def dependencyText = providers.exec {
        it.workingDir = new File('../../')
        commandLine('cargo', 'metadata', '--format-version', '1')
    }.standardOutput.asText.get()

    def dependencyJson = new groovy.json.JsonSlurper().parseText(dependencyText)
    def manifestPath = file(dependencyJson.packages.find { it.name == 'rustls-platform-verifier-android' }.manifest_path)

    def aar = fileTree(manifestPath.parentFile).matching {
        include 'maven/rustls/rustls-platform-verifier/*/rustls-platform-verifier-*.aar'
    }.getSingleFile()
    return zipTree(aar).matching { include 'classes.jar' }.getSingleFile()
}

dependencies {
    implementation 'net.java.dev.jna:jna:5.17.0@aar'
    implementation files(findRustlsPlatformVerifierClassesJar())

    implementation 'androidx.core:core-ktx:1.15.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}

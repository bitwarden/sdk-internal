plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'maven-publish'
}

android {
    namespace = 'com.bitwarden.sdk'
    compileSdk = 35

    defaultConfig {
        minSdk = 28
        targetSdk = 35

        testInstrumentationRunner = 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lint {
        baseline = file('lint-baseline.xml')
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
        }
    }
}

String composeDescription() {
    def commitHash = 'git rev-parse HEAD'.execute().text.trim()
    def changelog = 'git log -1 --oneline'.execute().text.trim()
    def workflowRunId = System.getenv('GITHUB_RUN_ID') ?: "local"

    def workflowRunUrl
    switch (workflowRunId) {
        case "local":
            workflowRunUrl = "local"
            break
        default:
            workflowRunUrl = "https://github.com/bitwarden/sdk-internal/actions/runs/${workflowRunId}"
            break
    }

    return """\
            ðŸ§± commit: ${commitHash}
            ðŸ’» build source: ${workflowRunUrl}
            ðŸ“œ changelog: ${changelog}""".stripIndent()
}

String composeVersion(String branchName){
    def shortCommitHash = 'git rev-parse --short HEAD'.execute().text.trim()
    def workflowRunNumber = System.getenv('GITHUB_RUN_NUMBER') ?: "local"

    def content = ['grep', '-o', '^version = ".*"', rootDir.toString() + '/../../../Cargo.toml'].execute().text.trim()
    def match = ~/version = "(.*)"/
    def sdkVersion = match.matcher(content)
    sdkVersion.find()

    switch(branchName){
        case "main":
            return "${sdkVersion.group(1)}-${workflowRunNumber}-${shortCommitHash}"
        default:
            return "${sdkVersion.group(1)}-${workflowRunNumber}-${branchName.replaceAll('/', '-')}"
    }
}

def exportSdkInfoToGithubOutput(String artifactId, String groupId, String version){
    def sdkPackageId = "${groupId}:${artifactId}"
    def isCI = System.getenv('CI') != null

    if (isCI) {
        def githubOutput = System.getenv("GITHUB_OUTPUT")
        
        new File(githubOutput) << "sdk-package-id=${sdkPackageId}\n"
        new File(githubOutput) << "sdk-version=${version}\n"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            def branchName = 'git branch --show-current'.execute().text.trim()
            groupId = 'com.bitwarden'
            
            switch (branchName) {
                case "main":
                    artifactId = 'sdk-android'
                    break
                default:
                    artifactId = 'sdk-android.dev'
                    break
            }

            def aboutThisPackage = composeDescription()

            if (findProperty('version') == 'unspecified') {
                version = composeVersion(branchName)
            }

            exportSdkInfoToGithubOutput(artifactId,groupId,version)

            pom {
                name.set("Bitwarden SDK for Android")
                description.set(aboutThisPackage)
                url.set("https://github.com/bitwarden/sdk-internal")
            }

            afterEvaluate {
                from components.release
            }
        }
    }
    
    repositories {
        maven {
            name = 'GitHubPackages'
            url = 'https://maven.pkg.github.com/bitwarden/sdk-internal'
            credentials {
                username = System.getenv('GITHUB_ACTOR')
                password = System.getenv('GITHUB_TOKEN')
            }
        }
    }
}

// Find and include the classes.jar from platform-verifier.
//
// Based on the instructions from the readme in https://github.com/rustls/rustls-platform-verifier
// and issue details from https://github.com/rustls/rustls-platform-verifier/issues/115.
File findRustlsPlatformVerifierClassesJar() {
    def dependencyText = providers.exec {
        it.workingDir = new File('../../')
        commandLine('cargo', 'metadata', '--format-version', '1')
    }.standardOutput.asText.get()

    def dependencyJson = new groovy.json.JsonSlurper().parseText(dependencyText)
    def manifestPath = file(dependencyJson.packages.find { it.name == 'rustls-platform-verifier-android' }.manifest_path)

    def aar = fileTree(manifestPath.parentFile).matching {
        include 'maven/rustls/rustls-platform-verifier/*/rustls-platform-verifier-*.aar'
    }.getSingleFile()
    return zipTree(aar).matching { include 'classes.jar' }.getSingleFile()
}

dependencies {
    implementation 'net.java.dev.jna:jna:5.17.0@aar'
    implementation files(findRustlsPlatformVerifierClassesJar())

    implementation 'androidx.core:core-ktx:1.15.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
}

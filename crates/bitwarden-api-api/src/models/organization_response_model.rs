/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct OrganizationResponseModel {
    #[serde(
        rename = "object",
        alias = "Object",
        skip_serializing_if = "Option::is_none"
    )]
    pub object: Option<String>,
    #[serde(rename = "id", alias = "Id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    #[serde(
        rename = "name",
        alias = "Name",
        skip_serializing_if = "Option::is_none"
    )]
    pub name: Option<String>,
    #[serde(
        rename = "businessName",
        alias = "BusinessName",
        skip_serializing_if = "Option::is_none"
    )]
    pub business_name: Option<String>,
    #[serde(
        rename = "businessAddress1",
        alias = "BusinessAddress1",
        skip_serializing_if = "Option::is_none"
    )]
    pub business_address1: Option<String>,
    #[serde(
        rename = "businessAddress2",
        alias = "BusinessAddress2",
        skip_serializing_if = "Option::is_none"
    )]
    pub business_address2: Option<String>,
    #[serde(
        rename = "businessAddress3",
        alias = "BusinessAddress3",
        skip_serializing_if = "Option::is_none"
    )]
    pub business_address3: Option<String>,
    #[serde(
        rename = "businessCountry",
        alias = "BusinessCountry",
        skip_serializing_if = "Option::is_none"
    )]
    pub business_country: Option<String>,
    #[serde(
        rename = "businessTaxNumber",
        alias = "BusinessTaxNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub business_tax_number: Option<String>,
    #[serde(
        rename = "billingEmail",
        alias = "BillingEmail",
        skip_serializing_if = "Option::is_none"
    )]
    pub billing_email: Option<String>,
    #[serde(
        rename = "plan",
        alias = "Plan",
        skip_serializing_if = "Option::is_none"
    )]
    pub plan: Option<Box<models::PlanResponseModel>>,
    #[serde(
        rename = "secretsManagerPlan",
        alias = "SecretsManagerPlan",
        skip_serializing_if = "Option::is_none"
    )]
    pub secrets_manager_plan: Option<Box<models::PlanResponseModel>>,
    #[serde(
        rename = "planType",
        alias = "PlanType",
        skip_serializing_if = "Option::is_none"
    )]
    pub plan_type: Option<models::PlanType>,
    #[serde(
        rename = "seats",
        alias = "Seats",
        skip_serializing_if = "Option::is_none"
    )]
    pub seats: Option<i32>,
    #[serde(
        rename = "maxAutoscaleSeats",
        alias = "MaxAutoscaleSeats",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_autoscale_seats: Option<i32>,
    #[serde(
        rename = "maxCollections",
        alias = "MaxCollections",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_collections: Option<i32>,
    #[serde(
        rename = "maxStorageGb",
        alias = "MaxStorageGb",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_storage_gb: Option<i32>,
    #[serde(
        rename = "usePolicies",
        alias = "UsePolicies",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_policies: Option<bool>,
    #[serde(
        rename = "useSso",
        alias = "UseSso",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_sso: Option<bool>,
    #[serde(
        rename = "useKeyConnector",
        alias = "UseKeyConnector",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_key_connector: Option<bool>,
    #[serde(
        rename = "useScim",
        alias = "UseScim",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_scim: Option<bool>,
    #[serde(
        rename = "useGroups",
        alias = "UseGroups",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_groups: Option<bool>,
    #[serde(
        rename = "useDirectory",
        alias = "UseDirectory",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_directory: Option<bool>,
    #[serde(
        rename = "useEvents",
        alias = "UseEvents",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_events: Option<bool>,
    #[serde(
        rename = "useTotp",
        alias = "UseTotp",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_totp: Option<bool>,
    #[serde(
        rename = "use2fa",
        alias = "Use2fa",
        skip_serializing_if = "Option::is_none"
    )]
    pub use2fa: Option<bool>,
    #[serde(
        rename = "useApi",
        alias = "UseApi",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_api: Option<bool>,
    #[serde(
        rename = "useSecretsManager",
        alias = "UseSecretsManager",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_secrets_manager: Option<bool>,
    #[serde(
        rename = "useResetPassword",
        alias = "UseResetPassword",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_reset_password: Option<bool>,
    #[serde(
        rename = "usersGetPremium",
        alias = "UsersGetPremium",
        skip_serializing_if = "Option::is_none"
    )]
    pub users_get_premium: Option<bool>,
    #[serde(
        rename = "useCustomPermissions",
        alias = "UseCustomPermissions",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_custom_permissions: Option<bool>,
    #[serde(
        rename = "selfHost",
        alias = "SelfHost",
        skip_serializing_if = "Option::is_none"
    )]
    pub self_host: Option<bool>,
    #[serde(
        rename = "hasPublicAndPrivateKeys",
        alias = "HasPublicAndPrivateKeys",
        skip_serializing_if = "Option::is_none"
    )]
    pub has_public_and_private_keys: Option<bool>,
    #[serde(
        rename = "usePasswordManager",
        alias = "UsePasswordManager",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_password_manager: Option<bool>,
    #[serde(
        rename = "smSeats",
        alias = "SmSeats",
        skip_serializing_if = "Option::is_none"
    )]
    pub sm_seats: Option<i32>,
    #[serde(
        rename = "smServiceAccounts",
        alias = "SmServiceAccounts",
        skip_serializing_if = "Option::is_none"
    )]
    pub sm_service_accounts: Option<i32>,
    #[serde(
        rename = "maxAutoscaleSmSeats",
        alias = "MaxAutoscaleSmSeats",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_autoscale_sm_seats: Option<i32>,
    #[serde(
        rename = "maxAutoscaleSmServiceAccounts",
        alias = "MaxAutoscaleSmServiceAccounts",
        skip_serializing_if = "Option::is_none"
    )]
    pub max_autoscale_sm_service_accounts: Option<i32>,
    #[serde(
        rename = "limitCollectionCreation",
        alias = "LimitCollectionCreation",
        skip_serializing_if = "Option::is_none"
    )]
    pub limit_collection_creation: Option<bool>,
    #[serde(
        rename = "limitCollectionDeletion",
        alias = "LimitCollectionDeletion",
        skip_serializing_if = "Option::is_none"
    )]
    pub limit_collection_deletion: Option<bool>,
    #[serde(
        rename = "limitItemDeletion",
        alias = "LimitItemDeletion",
        skip_serializing_if = "Option::is_none"
    )]
    pub limit_item_deletion: Option<bool>,
    #[serde(
        rename = "allowAdminAccessToAllCollectionItems",
        alias = "AllowAdminAccessToAllCollectionItems",
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_admin_access_to_all_collection_items: Option<bool>,
    #[serde(
        rename = "useRiskInsights",
        alias = "UseRiskInsights",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_risk_insights: Option<bool>,
    #[serde(
        rename = "useOrganizationDomains",
        alias = "UseOrganizationDomains",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_organization_domains: Option<bool>,
    #[serde(
        rename = "useAdminSponsoredFamilies",
        alias = "UseAdminSponsoredFamilies",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_admin_sponsored_families: Option<bool>,
}

impl OrganizationResponseModel {
    pub fn new() -> OrganizationResponseModel {
        OrganizationResponseModel {
            object: None,
            id: None,
            name: None,
            business_name: None,
            business_address1: None,
            business_address2: None,
            business_address3: None,
            business_country: None,
            business_tax_number: None,
            billing_email: None,
            plan: None,
            secrets_manager_plan: None,
            plan_type: None,
            seats: None,
            max_autoscale_seats: None,
            max_collections: None,
            max_storage_gb: None,
            use_policies: None,
            use_sso: None,
            use_key_connector: None,
            use_scim: None,
            use_groups: None,
            use_directory: None,
            use_events: None,
            use_totp: None,
            use2fa: None,
            use_api: None,
            use_secrets_manager: None,
            use_reset_password: None,
            users_get_premium: None,
            use_custom_permissions: None,
            self_host: None,
            has_public_and_private_keys: None,
            use_password_manager: None,
            sm_seats: None,
            sm_service_accounts: None,
            max_autoscale_sm_seats: None,
            max_autoscale_sm_service_accounts: None,
            limit_collection_creation: None,
            limit_collection_deletion: None,
            limit_item_deletion: None,
            allow_admin_access_to_all_collection_items: None,
            use_risk_insights: None,
            use_organization_domains: None,
            use_admin_sponsored_families: None,
        }
    }
}

/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventResponseModel {
    #[serde(
        rename = "object",
        alias = "Object",
        skip_serializing_if = "Option::is_none"
    )]
    pub object: Option<String>,
    #[serde(
        rename = "type",
        alias = "R#type",
        skip_serializing_if = "Option::is_none"
    )]
    pub r#type: Option<models::EventType>,
    #[serde(
        rename = "userId",
        alias = "UserId",
        skip_serializing_if = "Option::is_none"
    )]
    pub user_id: Option<uuid::Uuid>,
    #[serde(
        rename = "organizationId",
        alias = "OrganizationId",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_id: Option<uuid::Uuid>,
    #[serde(
        rename = "providerId",
        alias = "ProviderId",
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_id: Option<uuid::Uuid>,
    #[serde(
        rename = "cipherId",
        alias = "CipherId",
        skip_serializing_if = "Option::is_none"
    )]
    pub cipher_id: Option<uuid::Uuid>,
    #[serde(
        rename = "collectionId",
        alias = "CollectionId",
        skip_serializing_if = "Option::is_none"
    )]
    pub collection_id: Option<uuid::Uuid>,
    #[serde(
        rename = "groupId",
        alias = "GroupId",
        skip_serializing_if = "Option::is_none"
    )]
    pub group_id: Option<uuid::Uuid>,
    #[serde(
        rename = "policyId",
        alias = "PolicyId",
        skip_serializing_if = "Option::is_none"
    )]
    pub policy_id: Option<uuid::Uuid>,
    #[serde(
        rename = "organizationUserId",
        alias = "OrganizationUserId",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_user_id: Option<uuid::Uuid>,
    #[serde(
        rename = "providerUserId",
        alias = "ProviderUserId",
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_user_id: Option<uuid::Uuid>,
    #[serde(
        rename = "providerOrganizationId",
        alias = "ProviderOrganizationId",
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_organization_id: Option<uuid::Uuid>,
    #[serde(
        rename = "actingUserId",
        alias = "ActingUserId",
        skip_serializing_if = "Option::is_none"
    )]
    pub acting_user_id: Option<uuid::Uuid>,
    #[serde(
        rename = "installationId",
        alias = "InstallationId",
        skip_serializing_if = "Option::is_none"
    )]
    pub installation_id: Option<uuid::Uuid>,
    #[serde(
        rename = "date",
        alias = "Date",
        skip_serializing_if = "Option::is_none"
    )]
    pub date: Option<String>,
    #[serde(
        rename = "deviceType",
        alias = "DeviceType",
        skip_serializing_if = "Option::is_none"
    )]
    pub device_type: Option<models::DeviceType>,
    #[serde(
        rename = "ipAddress",
        alias = "IpAddress",
        skip_serializing_if = "Option::is_none"
    )]
    pub ip_address: Option<String>,
    #[serde(
        rename = "systemUser",
        alias = "SystemUser",
        skip_serializing_if = "Option::is_none"
    )]
    pub system_user: Option<models::EventSystemUser>,
    #[serde(
        rename = "domainName",
        alias = "DomainName",
        skip_serializing_if = "Option::is_none"
    )]
    pub domain_name: Option<String>,
    #[serde(
        rename = "secretId",
        alias = "SecretId",
        skip_serializing_if = "Option::is_none"
    )]
    pub secret_id: Option<uuid::Uuid>,
    #[serde(
        rename = "projectId",
        alias = "ProjectId",
        skip_serializing_if = "Option::is_none"
    )]
    pub project_id: Option<uuid::Uuid>,
    #[serde(
        rename = "serviceAccountId",
        alias = "ServiceAccountId",
        skip_serializing_if = "Option::is_none"
    )]
    pub service_account_id: Option<uuid::Uuid>,
    #[serde(
        rename = "grantedServiceAccountId",
        alias = "GrantedServiceAccountId",
        skip_serializing_if = "Option::is_none"
    )]
    pub granted_service_account_id: Option<uuid::Uuid>,
}

impl EventResponseModel {
    pub fn new() -> EventResponseModel {
        EventResponseModel {
            object: None,
            r#type: None,
            user_id: None,
            organization_id: None,
            provider_id: None,
            cipher_id: None,
            collection_id: None,
            group_id: None,
            policy_id: None,
            organization_user_id: None,
            provider_user_id: None,
            provider_organization_id: None,
            acting_user_id: None,
            installation_id: None,
            date: None,
            device_type: None,
            ip_address: None,
            system_user: None,
            domain_name: None,
            secret_id: None,
            project_id: None,
            service_account_id: None,
            granted_service_account_id: None,
        }
    }
}

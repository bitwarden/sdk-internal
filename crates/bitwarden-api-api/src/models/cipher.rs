/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Cipher {
    #[serde(rename = "id", alias = "Id", skip_serializing_if = "Option::is_none")]
    pub id: Option<uuid::Uuid>,
    #[serde(
        rename = "userId",
        alias = "UserId",
        skip_serializing_if = "Option::is_none"
    )]
    pub user_id: Option<uuid::Uuid>,
    #[serde(
        rename = "organizationId",
        alias = "OrganizationId",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_id: Option<uuid::Uuid>,
    #[serde(
        rename = "type",
        alias = "R#type",
        skip_serializing_if = "Option::is_none"
    )]
    pub r#type: Option<models::CipherType>,
    #[serde(
        rename = "data",
        alias = "Data",
        skip_serializing_if = "Option::is_none"
    )]
    pub data: Option<String>,
    #[serde(
        rename = "favorites",
        alias = "Favorites",
        skip_serializing_if = "Option::is_none"
    )]
    pub favorites: Option<String>,
    #[serde(
        rename = "folders",
        alias = "Folders",
        skip_serializing_if = "Option::is_none"
    )]
    pub folders: Option<String>,
    #[serde(
        rename = "attachments",
        alias = "Attachments",
        skip_serializing_if = "Option::is_none"
    )]
    pub attachments: Option<String>,
    #[serde(
        rename = "creationDate",
        alias = "CreationDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub creation_date: Option<String>,
    #[serde(
        rename = "revisionDate",
        alias = "RevisionDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub revision_date: Option<String>,
    #[serde(
        rename = "deletedDate",
        alias = "DeletedDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub deleted_date: Option<String>,
    #[serde(
        rename = "reprompt",
        alias = "Reprompt",
        skip_serializing_if = "Option::is_none"
    )]
    pub reprompt: Option<models::CipherRepromptType>,
    #[serde(rename = "key", alias = "Key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    #[serde(
        rename = "archivedDate",
        alias = "ArchivedDate",
        skip_serializing_if = "Option::is_none"
    )]
    pub archived_date: Option<String>,
}

impl Cipher {
    pub fn new() -> Cipher {
        Cipher {
            id: None,
            user_id: None,
            organization_id: None,
            r#type: None,
            data: None,
            favorites: None,
            folders: None,
            attachments: None,
            creation_date: None,
            revision_date: None,
            deleted_date: None,
            reprompt: None,
            key: None,
            archived_date: None,
        }
    }
}

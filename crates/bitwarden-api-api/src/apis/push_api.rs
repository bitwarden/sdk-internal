/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`push_add_organization_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PushAddOrganizationPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`push_delete_organization_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PushDeleteOrganizationPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`push_delete_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PushDeletePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`push_register_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PushRegisterPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`push_send_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PushSendPostError {
    UnknownValue(serde_json::Value),
}

pub async fn push_add_organization_put(
    configuration: &configuration::Configuration,
    push_update_request_model: Option<models::PushUpdateRequestModel>,
) -> Result<(), Error<PushAddOrganizationPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_push_update_request_model = push_update_request_model;

    let uri_str = format!("{}/push/add-organization", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_push_update_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PushAddOrganizationPutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn push_delete_organization_put(
    configuration: &configuration::Configuration,
    push_update_request_model: Option<models::PushUpdateRequestModel>,
) -> Result<(), Error<PushDeleteOrganizationPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_push_update_request_model = push_update_request_model;

    let uri_str = format!("{}/push/delete-organization", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_push_update_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PushDeleteOrganizationPutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn push_delete_post(
    configuration: &configuration::Configuration,
    push_device_request_model: Option<models::PushDeviceRequestModel>,
) -> Result<(), Error<PushDeletePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_push_device_request_model = push_device_request_model;

    let uri_str = format!("{}/push/delete", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_push_device_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PushDeletePostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn push_register_post(
    configuration: &configuration::Configuration,
    push_registration_request_model: Option<models::PushRegistrationRequestModel>,
) -> Result<(), Error<PushRegisterPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_push_registration_request_model = push_registration_request_model;

    let uri_str = format!("{}/push/register", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_push_registration_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PushRegisterPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn push_send_post(
    configuration: &configuration::Configuration,
    json_element_push_send_request_model: Option<models::JsonElementPushSendRequestModel>,
) -> Result<(), Error<PushSendPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_json_element_push_send_request_model = json_element_push_send_request_model;

    let uri_str = format!("{}/push/send", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_json_element_push_send_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PushSendPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

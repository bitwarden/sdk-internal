/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`organizations_organization_id_billing_vnext_address_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationsOrganizationIdBillingVnextAddressGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organizations_organization_id_billing_vnext_address_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationsOrganizationIdBillingVnextAddressPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method
/// [`organizations_organization_id_billing_vnext_credit_bitpay_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationsOrganizationIdBillingVnextCreditBitpayPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organizations_organization_id_billing_vnext_credit_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationsOrganizationIdBillingVnextCreditGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method
/// [`organizations_organization_id_billing_vnext_payment_method_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationsOrganizationIdBillingVnextPaymentMethodGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method
/// [`organizations_organization_id_billing_vnext_payment_method_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationsOrganizationIdBillingVnextPaymentMethodPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method
/// [`organizations_organization_id_billing_vnext_payment_method_verify_bank_account_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationsOrganizationIdBillingVnextPaymentMethodVerifyBankAccountPostError {
    UnknownValue(serde_json::Value),
}

pub async fn organizations_organization_id_billing_vnext_address_get(
    configuration: &configuration::Configuration,
    organization_id: &str,
    id: Option<uuid::Uuid>,
    identifier: Option<&str>,
    name: Option<&str>,
    business_name: Option<&str>,
    business_address1: Option<&str>,
    business_address2: Option<&str>,
    business_address3: Option<&str>,
    business_country: Option<&str>,
    business_tax_number: Option<&str>,
    billing_email: Option<&str>,
    plan: Option<&str>,
    plan_type: Option<models::PlanType>,
    seats: Option<i32>,
    max_collections: Option<i32>,
    use_policies: Option<bool>,
    use_sso: Option<bool>,
    use_key_connector: Option<bool>,
    use_scim: Option<bool>,
    use_groups: Option<bool>,
    use_directory: Option<bool>,
    use_events: Option<bool>,
    use_totp: Option<bool>,
    use2fa: Option<bool>,
    use_api: Option<bool>,
    use_reset_password: Option<bool>,
    use_secrets_manager: Option<bool>,
    self_host: Option<bool>,
    users_get_premium: Option<bool>,
    use_custom_permissions: Option<bool>,
    storage: Option<i64>,
    max_storage_gb: Option<i32>,
    gateway: Option<models::GatewayType>,
    gateway_customer_id: Option<&str>,
    gateway_subscription_id: Option<&str>,
    reference_data: Option<&str>,
    enabled: Option<bool>,
    license_key: Option<&str>,
    public_key: Option<&str>,
    private_key: Option<&str>,
    two_factor_providers: Option<&str>,
    expiration_date: Option<String>,
    creation_date: Option<String>,
    revision_date: Option<String>,
    max_autoscale_seats: Option<i32>,
    owners_notified_of_autoscaling: Option<String>,
    status: Option<models::OrganizationStatusType>,
    use_password_manager: Option<bool>,
    sm_seats: Option<i32>,
    sm_service_accounts: Option<i32>,
    max_autoscale_sm_seats: Option<i32>,
    max_autoscale_sm_service_accounts: Option<i32>,
    limit_collection_creation: Option<bool>,
    limit_collection_deletion: Option<bool>,
    allow_admin_access_to_all_collection_items: Option<bool>,
    limit_item_deletion: Option<bool>,
    use_risk_insights: Option<bool>,
    use_organization_domains: Option<bool>,
    use_admin_sponsored_families: Option<bool>,
    sync_seats: Option<bool>,
) -> Result<(), Error<OrganizationsOrganizationIdBillingVnextAddressGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_id = id;
    let p_identifier = identifier;
    let p_name = name;
    let p_business_name = business_name;
    let p_business_address1 = business_address1;
    let p_business_address2 = business_address2;
    let p_business_address3 = business_address3;
    let p_business_country = business_country;
    let p_business_tax_number = business_tax_number;
    let p_billing_email = billing_email;
    let p_plan = plan;
    let p_plan_type = plan_type;
    let p_seats = seats;
    let p_max_collections = max_collections;
    let p_use_policies = use_policies;
    let p_use_sso = use_sso;
    let p_use_key_connector = use_key_connector;
    let p_use_scim = use_scim;
    let p_use_groups = use_groups;
    let p_use_directory = use_directory;
    let p_use_events = use_events;
    let p_use_totp = use_totp;
    let p_use2fa = use2fa;
    let p_use_api = use_api;
    let p_use_reset_password = use_reset_password;
    let p_use_secrets_manager = use_secrets_manager;
    let p_self_host = self_host;
    let p_users_get_premium = users_get_premium;
    let p_use_custom_permissions = use_custom_permissions;
    let p_storage = storage;
    let p_max_storage_gb = max_storage_gb;
    let p_gateway = gateway;
    let p_gateway_customer_id = gateway_customer_id;
    let p_gateway_subscription_id = gateway_subscription_id;
    let p_reference_data = reference_data;
    let p_enabled = enabled;
    let p_license_key = license_key;
    let p_public_key = public_key;
    let p_private_key = private_key;
    let p_two_factor_providers = two_factor_providers;
    let p_expiration_date = expiration_date;
    let p_creation_date = creation_date;
    let p_revision_date = revision_date;
    let p_max_autoscale_seats = max_autoscale_seats;
    let p_owners_notified_of_autoscaling = owners_notified_of_autoscaling;
    let p_status = status;
    let p_use_password_manager = use_password_manager;
    let p_sm_seats = sm_seats;
    let p_sm_service_accounts = sm_service_accounts;
    let p_max_autoscale_sm_seats = max_autoscale_sm_seats;
    let p_max_autoscale_sm_service_accounts = max_autoscale_sm_service_accounts;
    let p_limit_collection_creation = limit_collection_creation;
    let p_limit_collection_deletion = limit_collection_deletion;
    let p_allow_admin_access_to_all_collection_items = allow_admin_access_to_all_collection_items;
    let p_limit_item_deletion = limit_item_deletion;
    let p_use_risk_insights = use_risk_insights;
    let p_use_organization_domains = use_organization_domains;
    let p_use_admin_sponsored_families = use_admin_sponsored_families;
    let p_sync_seats = sync_seats;

    let uri_str = format!(
        "{}/organizations/{organizationId}/billing/vnext/address",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_id {
        req_builder = req_builder.query(&[("id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_identifier {
        req_builder = req_builder.query(&[("identifier", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_name {
        req_builder = req_builder.query(&[("businessName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address1 {
        req_builder = req_builder.query(&[("businessAddress1", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address2 {
        req_builder = req_builder.query(&[("businessAddress2", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address3 {
        req_builder = req_builder.query(&[("businessAddress3", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_country {
        req_builder = req_builder.query(&[("businessCountry", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_tax_number {
        req_builder = req_builder.query(&[("businessTaxNumber", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_billing_email {
        req_builder = req_builder.query(&[("billingEmail", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan {
        req_builder = req_builder.query(&[("plan", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan_type {
        req_builder = req_builder.query(&[("planType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_seats {
        req_builder = req_builder.query(&[("seats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_collections {
        req_builder = req_builder.query(&[("maxCollections", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_policies {
        req_builder = req_builder.query(&[("usePolicies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_sso {
        req_builder = req_builder.query(&[("useSso", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_key_connector {
        req_builder = req_builder.query(&[("useKeyConnector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_scim {
        req_builder = req_builder.query(&[("useScim", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_groups {
        req_builder = req_builder.query(&[("useGroups", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_directory {
        req_builder = req_builder.query(&[("useDirectory", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_events {
        req_builder = req_builder.query(&[("useEvents", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_totp {
        req_builder = req_builder.query(&[("useTotp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use2fa {
        req_builder = req_builder.query(&[("use2fa", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_api {
        req_builder = req_builder.query(&[("useApi", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_reset_password {
        req_builder = req_builder.query(&[("useResetPassword", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_secrets_manager {
        req_builder = req_builder.query(&[("useSecretsManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_self_host {
        req_builder = req_builder.query(&[("selfHost", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_users_get_premium {
        req_builder = req_builder.query(&[("usersGetPremium", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_custom_permissions {
        req_builder = req_builder.query(&[("useCustomPermissions", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_storage {
        req_builder = req_builder.query(&[("storage", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_storage_gb {
        req_builder = req_builder.query(&[("maxStorageGb", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway {
        req_builder = req_builder.query(&[("gateway", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_customer_id {
        req_builder = req_builder.query(&[("gatewayCustomerId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_subscription_id {
        req_builder = req_builder.query(&[("gatewaySubscriptionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_reference_data {
        req_builder = req_builder.query(&[("referenceData", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_enabled {
        req_builder = req_builder.query(&[("enabled", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_license_key {
        req_builder = req_builder.query(&[("licenseKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_public_key {
        req_builder = req_builder.query(&[("publicKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_private_key {
        req_builder = req_builder.query(&[("privateKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_two_factor_providers {
        req_builder = req_builder.query(&[("twoFactorProviders", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_expiration_date {
        req_builder = req_builder.query(&[("expirationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_creation_date {
        req_builder = req_builder.query(&[("creationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_revision_date {
        req_builder = req_builder.query(&[("revisionDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_owners_notified_of_autoscaling {
        req_builder =
            req_builder.query(&[("ownersNotifiedOfAutoscaling", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_password_manager {
        req_builder = req_builder.query(&[("usePasswordManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_seats {
        req_builder = req_builder.query(&[("smSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_service_accounts {
        req_builder = req_builder.query(&[("smServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSmSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_service_accounts {
        req_builder =
            req_builder.query(&[("maxAutoscaleSmServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_creation {
        req_builder = req_builder.query(&[("limitCollectionCreation", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_deletion {
        req_builder = req_builder.query(&[("limitCollectionDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allow_admin_access_to_all_collection_items {
        req_builder = req_builder.query(&[(
            "allowAdminAccessToAllCollectionItems",
            &param_value.to_string(),
        )]);
    }
    if let Some(ref param_value) = p_limit_item_deletion {
        req_builder = req_builder.query(&[("limitItemDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_risk_insights {
        req_builder = req_builder.query(&[("useRiskInsights", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_organization_domains {
        req_builder = req_builder.query(&[("useOrganizationDomains", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_admin_sponsored_families {
        req_builder = req_builder.query(&[("useAdminSponsoredFamilies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sync_seats {
        req_builder = req_builder.query(&[("syncSeats", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationsOrganizationIdBillingVnextAddressGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organizations_organization_id_billing_vnext_address_put(
    configuration: &configuration::Configuration,
    organization_id: &str,
    id: Option<uuid::Uuid>,
    identifier: Option<&str>,
    name: Option<&str>,
    business_name: Option<&str>,
    business_address1: Option<&str>,
    business_address2: Option<&str>,
    business_address3: Option<&str>,
    business_country: Option<&str>,
    business_tax_number: Option<&str>,
    billing_email: Option<&str>,
    plan: Option<&str>,
    plan_type: Option<models::PlanType>,
    seats: Option<i32>,
    max_collections: Option<i32>,
    use_policies: Option<bool>,
    use_sso: Option<bool>,
    use_key_connector: Option<bool>,
    use_scim: Option<bool>,
    use_groups: Option<bool>,
    use_directory: Option<bool>,
    use_events: Option<bool>,
    use_totp: Option<bool>,
    use2fa: Option<bool>,
    use_api: Option<bool>,
    use_reset_password: Option<bool>,
    use_secrets_manager: Option<bool>,
    self_host: Option<bool>,
    users_get_premium: Option<bool>,
    use_custom_permissions: Option<bool>,
    storage: Option<i64>,
    max_storage_gb: Option<i32>,
    gateway: Option<models::GatewayType>,
    gateway_customer_id: Option<&str>,
    gateway_subscription_id: Option<&str>,
    reference_data: Option<&str>,
    enabled: Option<bool>,
    license_key: Option<&str>,
    public_key: Option<&str>,
    private_key: Option<&str>,
    two_factor_providers: Option<&str>,
    expiration_date: Option<String>,
    creation_date: Option<String>,
    revision_date: Option<String>,
    max_autoscale_seats: Option<i32>,
    owners_notified_of_autoscaling: Option<String>,
    status: Option<models::OrganizationStatusType>,
    use_password_manager: Option<bool>,
    sm_seats: Option<i32>,
    sm_service_accounts: Option<i32>,
    max_autoscale_sm_seats: Option<i32>,
    max_autoscale_sm_service_accounts: Option<i32>,
    limit_collection_creation: Option<bool>,
    limit_collection_deletion: Option<bool>,
    allow_admin_access_to_all_collection_items: Option<bool>,
    limit_item_deletion: Option<bool>,
    use_risk_insights: Option<bool>,
    use_organization_domains: Option<bool>,
    use_admin_sponsored_families: Option<bool>,
    sync_seats: Option<bool>,
    billing_address_request: Option<models::BillingAddressRequest>,
) -> Result<(), Error<OrganizationsOrganizationIdBillingVnextAddressPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_id = id;
    let p_identifier = identifier;
    let p_name = name;
    let p_business_name = business_name;
    let p_business_address1 = business_address1;
    let p_business_address2 = business_address2;
    let p_business_address3 = business_address3;
    let p_business_country = business_country;
    let p_business_tax_number = business_tax_number;
    let p_billing_email = billing_email;
    let p_plan = plan;
    let p_plan_type = plan_type;
    let p_seats = seats;
    let p_max_collections = max_collections;
    let p_use_policies = use_policies;
    let p_use_sso = use_sso;
    let p_use_key_connector = use_key_connector;
    let p_use_scim = use_scim;
    let p_use_groups = use_groups;
    let p_use_directory = use_directory;
    let p_use_events = use_events;
    let p_use_totp = use_totp;
    let p_use2fa = use2fa;
    let p_use_api = use_api;
    let p_use_reset_password = use_reset_password;
    let p_use_secrets_manager = use_secrets_manager;
    let p_self_host = self_host;
    let p_users_get_premium = users_get_premium;
    let p_use_custom_permissions = use_custom_permissions;
    let p_storage = storage;
    let p_max_storage_gb = max_storage_gb;
    let p_gateway = gateway;
    let p_gateway_customer_id = gateway_customer_id;
    let p_gateway_subscription_id = gateway_subscription_id;
    let p_reference_data = reference_data;
    let p_enabled = enabled;
    let p_license_key = license_key;
    let p_public_key = public_key;
    let p_private_key = private_key;
    let p_two_factor_providers = two_factor_providers;
    let p_expiration_date = expiration_date;
    let p_creation_date = creation_date;
    let p_revision_date = revision_date;
    let p_max_autoscale_seats = max_autoscale_seats;
    let p_owners_notified_of_autoscaling = owners_notified_of_autoscaling;
    let p_status = status;
    let p_use_password_manager = use_password_manager;
    let p_sm_seats = sm_seats;
    let p_sm_service_accounts = sm_service_accounts;
    let p_max_autoscale_sm_seats = max_autoscale_sm_seats;
    let p_max_autoscale_sm_service_accounts = max_autoscale_sm_service_accounts;
    let p_limit_collection_creation = limit_collection_creation;
    let p_limit_collection_deletion = limit_collection_deletion;
    let p_allow_admin_access_to_all_collection_items = allow_admin_access_to_all_collection_items;
    let p_limit_item_deletion = limit_item_deletion;
    let p_use_risk_insights = use_risk_insights;
    let p_use_organization_domains = use_organization_domains;
    let p_use_admin_sponsored_families = use_admin_sponsored_families;
    let p_sync_seats = sync_seats;
    let p_billing_address_request = billing_address_request;

    let uri_str = format!(
        "{}/organizations/{organizationId}/billing/vnext/address",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = p_id {
        req_builder = req_builder.query(&[("id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_identifier {
        req_builder = req_builder.query(&[("identifier", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_name {
        req_builder = req_builder.query(&[("businessName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address1 {
        req_builder = req_builder.query(&[("businessAddress1", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address2 {
        req_builder = req_builder.query(&[("businessAddress2", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address3 {
        req_builder = req_builder.query(&[("businessAddress3", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_country {
        req_builder = req_builder.query(&[("businessCountry", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_tax_number {
        req_builder = req_builder.query(&[("businessTaxNumber", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_billing_email {
        req_builder = req_builder.query(&[("billingEmail", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan {
        req_builder = req_builder.query(&[("plan", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan_type {
        req_builder = req_builder.query(&[("planType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_seats {
        req_builder = req_builder.query(&[("seats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_collections {
        req_builder = req_builder.query(&[("maxCollections", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_policies {
        req_builder = req_builder.query(&[("usePolicies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_sso {
        req_builder = req_builder.query(&[("useSso", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_key_connector {
        req_builder = req_builder.query(&[("useKeyConnector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_scim {
        req_builder = req_builder.query(&[("useScim", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_groups {
        req_builder = req_builder.query(&[("useGroups", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_directory {
        req_builder = req_builder.query(&[("useDirectory", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_events {
        req_builder = req_builder.query(&[("useEvents", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_totp {
        req_builder = req_builder.query(&[("useTotp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use2fa {
        req_builder = req_builder.query(&[("use2fa", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_api {
        req_builder = req_builder.query(&[("useApi", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_reset_password {
        req_builder = req_builder.query(&[("useResetPassword", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_secrets_manager {
        req_builder = req_builder.query(&[("useSecretsManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_self_host {
        req_builder = req_builder.query(&[("selfHost", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_users_get_premium {
        req_builder = req_builder.query(&[("usersGetPremium", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_custom_permissions {
        req_builder = req_builder.query(&[("useCustomPermissions", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_storage {
        req_builder = req_builder.query(&[("storage", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_storage_gb {
        req_builder = req_builder.query(&[("maxStorageGb", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway {
        req_builder = req_builder.query(&[("gateway", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_customer_id {
        req_builder = req_builder.query(&[("gatewayCustomerId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_subscription_id {
        req_builder = req_builder.query(&[("gatewaySubscriptionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_reference_data {
        req_builder = req_builder.query(&[("referenceData", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_enabled {
        req_builder = req_builder.query(&[("enabled", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_license_key {
        req_builder = req_builder.query(&[("licenseKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_public_key {
        req_builder = req_builder.query(&[("publicKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_private_key {
        req_builder = req_builder.query(&[("privateKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_two_factor_providers {
        req_builder = req_builder.query(&[("twoFactorProviders", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_expiration_date {
        req_builder = req_builder.query(&[("expirationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_creation_date {
        req_builder = req_builder.query(&[("creationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_revision_date {
        req_builder = req_builder.query(&[("revisionDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_owners_notified_of_autoscaling {
        req_builder =
            req_builder.query(&[("ownersNotifiedOfAutoscaling", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_password_manager {
        req_builder = req_builder.query(&[("usePasswordManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_seats {
        req_builder = req_builder.query(&[("smSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_service_accounts {
        req_builder = req_builder.query(&[("smServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSmSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_service_accounts {
        req_builder =
            req_builder.query(&[("maxAutoscaleSmServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_creation {
        req_builder = req_builder.query(&[("limitCollectionCreation", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_deletion {
        req_builder = req_builder.query(&[("limitCollectionDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allow_admin_access_to_all_collection_items {
        req_builder = req_builder.query(&[(
            "allowAdminAccessToAllCollectionItems",
            &param_value.to_string(),
        )]);
    }
    if let Some(ref param_value) = p_limit_item_deletion {
        req_builder = req_builder.query(&[("limitItemDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_risk_insights {
        req_builder = req_builder.query(&[("useRiskInsights", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_organization_domains {
        req_builder = req_builder.query(&[("useOrganizationDomains", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_admin_sponsored_families {
        req_builder = req_builder.query(&[("useAdminSponsoredFamilies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sync_seats {
        req_builder = req_builder.query(&[("syncSeats", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_billing_address_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationsOrganizationIdBillingVnextAddressPutError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organizations_organization_id_billing_vnext_credit_bitpay_post(
    configuration: &configuration::Configuration,
    organization_id: &str,
    id: Option<uuid::Uuid>,
    identifier: Option<&str>,
    name: Option<&str>,
    business_name: Option<&str>,
    business_address1: Option<&str>,
    business_address2: Option<&str>,
    business_address3: Option<&str>,
    business_country: Option<&str>,
    business_tax_number: Option<&str>,
    billing_email: Option<&str>,
    plan: Option<&str>,
    plan_type: Option<models::PlanType>,
    seats: Option<i32>,
    max_collections: Option<i32>,
    use_policies: Option<bool>,
    use_sso: Option<bool>,
    use_key_connector: Option<bool>,
    use_scim: Option<bool>,
    use_groups: Option<bool>,
    use_directory: Option<bool>,
    use_events: Option<bool>,
    use_totp: Option<bool>,
    use2fa: Option<bool>,
    use_api: Option<bool>,
    use_reset_password: Option<bool>,
    use_secrets_manager: Option<bool>,
    self_host: Option<bool>,
    users_get_premium: Option<bool>,
    use_custom_permissions: Option<bool>,
    storage: Option<i64>,
    max_storage_gb: Option<i32>,
    gateway: Option<models::GatewayType>,
    gateway_customer_id: Option<&str>,
    gateway_subscription_id: Option<&str>,
    reference_data: Option<&str>,
    enabled: Option<bool>,
    license_key: Option<&str>,
    public_key: Option<&str>,
    private_key: Option<&str>,
    two_factor_providers: Option<&str>,
    expiration_date: Option<String>,
    creation_date: Option<String>,
    revision_date: Option<String>,
    max_autoscale_seats: Option<i32>,
    owners_notified_of_autoscaling: Option<String>,
    status: Option<models::OrganizationStatusType>,
    use_password_manager: Option<bool>,
    sm_seats: Option<i32>,
    sm_service_accounts: Option<i32>,
    max_autoscale_sm_seats: Option<i32>,
    max_autoscale_sm_service_accounts: Option<i32>,
    limit_collection_creation: Option<bool>,
    limit_collection_deletion: Option<bool>,
    allow_admin_access_to_all_collection_items: Option<bool>,
    limit_item_deletion: Option<bool>,
    use_risk_insights: Option<bool>,
    use_organization_domains: Option<bool>,
    use_admin_sponsored_families: Option<bool>,
    sync_seats: Option<bool>,
    bit_pay_credit_request: Option<models::BitPayCreditRequest>,
) -> Result<(), Error<OrganizationsOrganizationIdBillingVnextCreditBitpayPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_id = id;
    let p_identifier = identifier;
    let p_name = name;
    let p_business_name = business_name;
    let p_business_address1 = business_address1;
    let p_business_address2 = business_address2;
    let p_business_address3 = business_address3;
    let p_business_country = business_country;
    let p_business_tax_number = business_tax_number;
    let p_billing_email = billing_email;
    let p_plan = plan;
    let p_plan_type = plan_type;
    let p_seats = seats;
    let p_max_collections = max_collections;
    let p_use_policies = use_policies;
    let p_use_sso = use_sso;
    let p_use_key_connector = use_key_connector;
    let p_use_scim = use_scim;
    let p_use_groups = use_groups;
    let p_use_directory = use_directory;
    let p_use_events = use_events;
    let p_use_totp = use_totp;
    let p_use2fa = use2fa;
    let p_use_api = use_api;
    let p_use_reset_password = use_reset_password;
    let p_use_secrets_manager = use_secrets_manager;
    let p_self_host = self_host;
    let p_users_get_premium = users_get_premium;
    let p_use_custom_permissions = use_custom_permissions;
    let p_storage = storage;
    let p_max_storage_gb = max_storage_gb;
    let p_gateway = gateway;
    let p_gateway_customer_id = gateway_customer_id;
    let p_gateway_subscription_id = gateway_subscription_id;
    let p_reference_data = reference_data;
    let p_enabled = enabled;
    let p_license_key = license_key;
    let p_public_key = public_key;
    let p_private_key = private_key;
    let p_two_factor_providers = two_factor_providers;
    let p_expiration_date = expiration_date;
    let p_creation_date = creation_date;
    let p_revision_date = revision_date;
    let p_max_autoscale_seats = max_autoscale_seats;
    let p_owners_notified_of_autoscaling = owners_notified_of_autoscaling;
    let p_status = status;
    let p_use_password_manager = use_password_manager;
    let p_sm_seats = sm_seats;
    let p_sm_service_accounts = sm_service_accounts;
    let p_max_autoscale_sm_seats = max_autoscale_sm_seats;
    let p_max_autoscale_sm_service_accounts = max_autoscale_sm_service_accounts;
    let p_limit_collection_creation = limit_collection_creation;
    let p_limit_collection_deletion = limit_collection_deletion;
    let p_allow_admin_access_to_all_collection_items = allow_admin_access_to_all_collection_items;
    let p_limit_item_deletion = limit_item_deletion;
    let p_use_risk_insights = use_risk_insights;
    let p_use_organization_domains = use_organization_domains;
    let p_use_admin_sponsored_families = use_admin_sponsored_families;
    let p_sync_seats = sync_seats;
    let p_bit_pay_credit_request = bit_pay_credit_request;

    let uri_str = format!(
        "{}/organizations/{organizationId}/billing/vnext/credit/bitpay",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_id {
        req_builder = req_builder.query(&[("id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_identifier {
        req_builder = req_builder.query(&[("identifier", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_name {
        req_builder = req_builder.query(&[("businessName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address1 {
        req_builder = req_builder.query(&[("businessAddress1", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address2 {
        req_builder = req_builder.query(&[("businessAddress2", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address3 {
        req_builder = req_builder.query(&[("businessAddress3", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_country {
        req_builder = req_builder.query(&[("businessCountry", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_tax_number {
        req_builder = req_builder.query(&[("businessTaxNumber", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_billing_email {
        req_builder = req_builder.query(&[("billingEmail", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan {
        req_builder = req_builder.query(&[("plan", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan_type {
        req_builder = req_builder.query(&[("planType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_seats {
        req_builder = req_builder.query(&[("seats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_collections {
        req_builder = req_builder.query(&[("maxCollections", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_policies {
        req_builder = req_builder.query(&[("usePolicies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_sso {
        req_builder = req_builder.query(&[("useSso", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_key_connector {
        req_builder = req_builder.query(&[("useKeyConnector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_scim {
        req_builder = req_builder.query(&[("useScim", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_groups {
        req_builder = req_builder.query(&[("useGroups", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_directory {
        req_builder = req_builder.query(&[("useDirectory", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_events {
        req_builder = req_builder.query(&[("useEvents", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_totp {
        req_builder = req_builder.query(&[("useTotp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use2fa {
        req_builder = req_builder.query(&[("use2fa", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_api {
        req_builder = req_builder.query(&[("useApi", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_reset_password {
        req_builder = req_builder.query(&[("useResetPassword", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_secrets_manager {
        req_builder = req_builder.query(&[("useSecretsManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_self_host {
        req_builder = req_builder.query(&[("selfHost", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_users_get_premium {
        req_builder = req_builder.query(&[("usersGetPremium", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_custom_permissions {
        req_builder = req_builder.query(&[("useCustomPermissions", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_storage {
        req_builder = req_builder.query(&[("storage", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_storage_gb {
        req_builder = req_builder.query(&[("maxStorageGb", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway {
        req_builder = req_builder.query(&[("gateway", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_customer_id {
        req_builder = req_builder.query(&[("gatewayCustomerId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_subscription_id {
        req_builder = req_builder.query(&[("gatewaySubscriptionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_reference_data {
        req_builder = req_builder.query(&[("referenceData", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_enabled {
        req_builder = req_builder.query(&[("enabled", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_license_key {
        req_builder = req_builder.query(&[("licenseKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_public_key {
        req_builder = req_builder.query(&[("publicKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_private_key {
        req_builder = req_builder.query(&[("privateKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_two_factor_providers {
        req_builder = req_builder.query(&[("twoFactorProviders", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_expiration_date {
        req_builder = req_builder.query(&[("expirationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_creation_date {
        req_builder = req_builder.query(&[("creationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_revision_date {
        req_builder = req_builder.query(&[("revisionDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_owners_notified_of_autoscaling {
        req_builder =
            req_builder.query(&[("ownersNotifiedOfAutoscaling", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_password_manager {
        req_builder = req_builder.query(&[("usePasswordManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_seats {
        req_builder = req_builder.query(&[("smSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_service_accounts {
        req_builder = req_builder.query(&[("smServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSmSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_service_accounts {
        req_builder =
            req_builder.query(&[("maxAutoscaleSmServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_creation {
        req_builder = req_builder.query(&[("limitCollectionCreation", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_deletion {
        req_builder = req_builder.query(&[("limitCollectionDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allow_admin_access_to_all_collection_items {
        req_builder = req_builder.query(&[(
            "allowAdminAccessToAllCollectionItems",
            &param_value.to_string(),
        )]);
    }
    if let Some(ref param_value) = p_limit_item_deletion {
        req_builder = req_builder.query(&[("limitItemDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_risk_insights {
        req_builder = req_builder.query(&[("useRiskInsights", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_organization_domains {
        req_builder = req_builder.query(&[("useOrganizationDomains", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_admin_sponsored_families {
        req_builder = req_builder.query(&[("useAdminSponsoredFamilies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sync_seats {
        req_builder = req_builder.query(&[("syncSeats", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_bit_pay_credit_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationsOrganizationIdBillingVnextCreditBitpayPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organizations_organization_id_billing_vnext_credit_get(
    configuration: &configuration::Configuration,
    organization_id: &str,
    id: Option<uuid::Uuid>,
    identifier: Option<&str>,
    name: Option<&str>,
    business_name: Option<&str>,
    business_address1: Option<&str>,
    business_address2: Option<&str>,
    business_address3: Option<&str>,
    business_country: Option<&str>,
    business_tax_number: Option<&str>,
    billing_email: Option<&str>,
    plan: Option<&str>,
    plan_type: Option<models::PlanType>,
    seats: Option<i32>,
    max_collections: Option<i32>,
    use_policies: Option<bool>,
    use_sso: Option<bool>,
    use_key_connector: Option<bool>,
    use_scim: Option<bool>,
    use_groups: Option<bool>,
    use_directory: Option<bool>,
    use_events: Option<bool>,
    use_totp: Option<bool>,
    use2fa: Option<bool>,
    use_api: Option<bool>,
    use_reset_password: Option<bool>,
    use_secrets_manager: Option<bool>,
    self_host: Option<bool>,
    users_get_premium: Option<bool>,
    use_custom_permissions: Option<bool>,
    storage: Option<i64>,
    max_storage_gb: Option<i32>,
    gateway: Option<models::GatewayType>,
    gateway_customer_id: Option<&str>,
    gateway_subscription_id: Option<&str>,
    reference_data: Option<&str>,
    enabled: Option<bool>,
    license_key: Option<&str>,
    public_key: Option<&str>,
    private_key: Option<&str>,
    two_factor_providers: Option<&str>,
    expiration_date: Option<String>,
    creation_date: Option<String>,
    revision_date: Option<String>,
    max_autoscale_seats: Option<i32>,
    owners_notified_of_autoscaling: Option<String>,
    status: Option<models::OrganizationStatusType>,
    use_password_manager: Option<bool>,
    sm_seats: Option<i32>,
    sm_service_accounts: Option<i32>,
    max_autoscale_sm_seats: Option<i32>,
    max_autoscale_sm_service_accounts: Option<i32>,
    limit_collection_creation: Option<bool>,
    limit_collection_deletion: Option<bool>,
    allow_admin_access_to_all_collection_items: Option<bool>,
    limit_item_deletion: Option<bool>,
    use_risk_insights: Option<bool>,
    use_organization_domains: Option<bool>,
    use_admin_sponsored_families: Option<bool>,
    sync_seats: Option<bool>,
) -> Result<(), Error<OrganizationsOrganizationIdBillingVnextCreditGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_id = id;
    let p_identifier = identifier;
    let p_name = name;
    let p_business_name = business_name;
    let p_business_address1 = business_address1;
    let p_business_address2 = business_address2;
    let p_business_address3 = business_address3;
    let p_business_country = business_country;
    let p_business_tax_number = business_tax_number;
    let p_billing_email = billing_email;
    let p_plan = plan;
    let p_plan_type = plan_type;
    let p_seats = seats;
    let p_max_collections = max_collections;
    let p_use_policies = use_policies;
    let p_use_sso = use_sso;
    let p_use_key_connector = use_key_connector;
    let p_use_scim = use_scim;
    let p_use_groups = use_groups;
    let p_use_directory = use_directory;
    let p_use_events = use_events;
    let p_use_totp = use_totp;
    let p_use2fa = use2fa;
    let p_use_api = use_api;
    let p_use_reset_password = use_reset_password;
    let p_use_secrets_manager = use_secrets_manager;
    let p_self_host = self_host;
    let p_users_get_premium = users_get_premium;
    let p_use_custom_permissions = use_custom_permissions;
    let p_storage = storage;
    let p_max_storage_gb = max_storage_gb;
    let p_gateway = gateway;
    let p_gateway_customer_id = gateway_customer_id;
    let p_gateway_subscription_id = gateway_subscription_id;
    let p_reference_data = reference_data;
    let p_enabled = enabled;
    let p_license_key = license_key;
    let p_public_key = public_key;
    let p_private_key = private_key;
    let p_two_factor_providers = two_factor_providers;
    let p_expiration_date = expiration_date;
    let p_creation_date = creation_date;
    let p_revision_date = revision_date;
    let p_max_autoscale_seats = max_autoscale_seats;
    let p_owners_notified_of_autoscaling = owners_notified_of_autoscaling;
    let p_status = status;
    let p_use_password_manager = use_password_manager;
    let p_sm_seats = sm_seats;
    let p_sm_service_accounts = sm_service_accounts;
    let p_max_autoscale_sm_seats = max_autoscale_sm_seats;
    let p_max_autoscale_sm_service_accounts = max_autoscale_sm_service_accounts;
    let p_limit_collection_creation = limit_collection_creation;
    let p_limit_collection_deletion = limit_collection_deletion;
    let p_allow_admin_access_to_all_collection_items = allow_admin_access_to_all_collection_items;
    let p_limit_item_deletion = limit_item_deletion;
    let p_use_risk_insights = use_risk_insights;
    let p_use_organization_domains = use_organization_domains;
    let p_use_admin_sponsored_families = use_admin_sponsored_families;
    let p_sync_seats = sync_seats;

    let uri_str = format!(
        "{}/organizations/{organizationId}/billing/vnext/credit",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_id {
        req_builder = req_builder.query(&[("id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_identifier {
        req_builder = req_builder.query(&[("identifier", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_name {
        req_builder = req_builder.query(&[("businessName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address1 {
        req_builder = req_builder.query(&[("businessAddress1", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address2 {
        req_builder = req_builder.query(&[("businessAddress2", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address3 {
        req_builder = req_builder.query(&[("businessAddress3", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_country {
        req_builder = req_builder.query(&[("businessCountry", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_tax_number {
        req_builder = req_builder.query(&[("businessTaxNumber", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_billing_email {
        req_builder = req_builder.query(&[("billingEmail", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan {
        req_builder = req_builder.query(&[("plan", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan_type {
        req_builder = req_builder.query(&[("planType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_seats {
        req_builder = req_builder.query(&[("seats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_collections {
        req_builder = req_builder.query(&[("maxCollections", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_policies {
        req_builder = req_builder.query(&[("usePolicies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_sso {
        req_builder = req_builder.query(&[("useSso", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_key_connector {
        req_builder = req_builder.query(&[("useKeyConnector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_scim {
        req_builder = req_builder.query(&[("useScim", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_groups {
        req_builder = req_builder.query(&[("useGroups", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_directory {
        req_builder = req_builder.query(&[("useDirectory", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_events {
        req_builder = req_builder.query(&[("useEvents", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_totp {
        req_builder = req_builder.query(&[("useTotp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use2fa {
        req_builder = req_builder.query(&[("use2fa", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_api {
        req_builder = req_builder.query(&[("useApi", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_reset_password {
        req_builder = req_builder.query(&[("useResetPassword", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_secrets_manager {
        req_builder = req_builder.query(&[("useSecretsManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_self_host {
        req_builder = req_builder.query(&[("selfHost", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_users_get_premium {
        req_builder = req_builder.query(&[("usersGetPremium", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_custom_permissions {
        req_builder = req_builder.query(&[("useCustomPermissions", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_storage {
        req_builder = req_builder.query(&[("storage", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_storage_gb {
        req_builder = req_builder.query(&[("maxStorageGb", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway {
        req_builder = req_builder.query(&[("gateway", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_customer_id {
        req_builder = req_builder.query(&[("gatewayCustomerId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_subscription_id {
        req_builder = req_builder.query(&[("gatewaySubscriptionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_reference_data {
        req_builder = req_builder.query(&[("referenceData", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_enabled {
        req_builder = req_builder.query(&[("enabled", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_license_key {
        req_builder = req_builder.query(&[("licenseKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_public_key {
        req_builder = req_builder.query(&[("publicKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_private_key {
        req_builder = req_builder.query(&[("privateKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_two_factor_providers {
        req_builder = req_builder.query(&[("twoFactorProviders", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_expiration_date {
        req_builder = req_builder.query(&[("expirationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_creation_date {
        req_builder = req_builder.query(&[("creationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_revision_date {
        req_builder = req_builder.query(&[("revisionDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_owners_notified_of_autoscaling {
        req_builder =
            req_builder.query(&[("ownersNotifiedOfAutoscaling", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_password_manager {
        req_builder = req_builder.query(&[("usePasswordManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_seats {
        req_builder = req_builder.query(&[("smSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_service_accounts {
        req_builder = req_builder.query(&[("smServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSmSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_service_accounts {
        req_builder =
            req_builder.query(&[("maxAutoscaleSmServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_creation {
        req_builder = req_builder.query(&[("limitCollectionCreation", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_deletion {
        req_builder = req_builder.query(&[("limitCollectionDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allow_admin_access_to_all_collection_items {
        req_builder = req_builder.query(&[(
            "allowAdminAccessToAllCollectionItems",
            &param_value.to_string(),
        )]);
    }
    if let Some(ref param_value) = p_limit_item_deletion {
        req_builder = req_builder.query(&[("limitItemDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_risk_insights {
        req_builder = req_builder.query(&[("useRiskInsights", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_organization_domains {
        req_builder = req_builder.query(&[("useOrganizationDomains", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_admin_sponsored_families {
        req_builder = req_builder.query(&[("useAdminSponsoredFamilies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sync_seats {
        req_builder = req_builder.query(&[("syncSeats", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationsOrganizationIdBillingVnextCreditGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organizations_organization_id_billing_vnext_payment_method_get(
    configuration: &configuration::Configuration,
    organization_id: &str,
    id: Option<uuid::Uuid>,
    identifier: Option<&str>,
    name: Option<&str>,
    business_name: Option<&str>,
    business_address1: Option<&str>,
    business_address2: Option<&str>,
    business_address3: Option<&str>,
    business_country: Option<&str>,
    business_tax_number: Option<&str>,
    billing_email: Option<&str>,
    plan: Option<&str>,
    plan_type: Option<models::PlanType>,
    seats: Option<i32>,
    max_collections: Option<i32>,
    use_policies: Option<bool>,
    use_sso: Option<bool>,
    use_key_connector: Option<bool>,
    use_scim: Option<bool>,
    use_groups: Option<bool>,
    use_directory: Option<bool>,
    use_events: Option<bool>,
    use_totp: Option<bool>,
    use2fa: Option<bool>,
    use_api: Option<bool>,
    use_reset_password: Option<bool>,
    use_secrets_manager: Option<bool>,
    self_host: Option<bool>,
    users_get_premium: Option<bool>,
    use_custom_permissions: Option<bool>,
    storage: Option<i64>,
    max_storage_gb: Option<i32>,
    gateway: Option<models::GatewayType>,
    gateway_customer_id: Option<&str>,
    gateway_subscription_id: Option<&str>,
    reference_data: Option<&str>,
    enabled: Option<bool>,
    license_key: Option<&str>,
    public_key: Option<&str>,
    private_key: Option<&str>,
    two_factor_providers: Option<&str>,
    expiration_date: Option<String>,
    creation_date: Option<String>,
    revision_date: Option<String>,
    max_autoscale_seats: Option<i32>,
    owners_notified_of_autoscaling: Option<String>,
    status: Option<models::OrganizationStatusType>,
    use_password_manager: Option<bool>,
    sm_seats: Option<i32>,
    sm_service_accounts: Option<i32>,
    max_autoscale_sm_seats: Option<i32>,
    max_autoscale_sm_service_accounts: Option<i32>,
    limit_collection_creation: Option<bool>,
    limit_collection_deletion: Option<bool>,
    allow_admin_access_to_all_collection_items: Option<bool>,
    limit_item_deletion: Option<bool>,
    use_risk_insights: Option<bool>,
    use_organization_domains: Option<bool>,
    use_admin_sponsored_families: Option<bool>,
    sync_seats: Option<bool>,
) -> Result<(), Error<OrganizationsOrganizationIdBillingVnextPaymentMethodGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_id = id;
    let p_identifier = identifier;
    let p_name = name;
    let p_business_name = business_name;
    let p_business_address1 = business_address1;
    let p_business_address2 = business_address2;
    let p_business_address3 = business_address3;
    let p_business_country = business_country;
    let p_business_tax_number = business_tax_number;
    let p_billing_email = billing_email;
    let p_plan = plan;
    let p_plan_type = plan_type;
    let p_seats = seats;
    let p_max_collections = max_collections;
    let p_use_policies = use_policies;
    let p_use_sso = use_sso;
    let p_use_key_connector = use_key_connector;
    let p_use_scim = use_scim;
    let p_use_groups = use_groups;
    let p_use_directory = use_directory;
    let p_use_events = use_events;
    let p_use_totp = use_totp;
    let p_use2fa = use2fa;
    let p_use_api = use_api;
    let p_use_reset_password = use_reset_password;
    let p_use_secrets_manager = use_secrets_manager;
    let p_self_host = self_host;
    let p_users_get_premium = users_get_premium;
    let p_use_custom_permissions = use_custom_permissions;
    let p_storage = storage;
    let p_max_storage_gb = max_storage_gb;
    let p_gateway = gateway;
    let p_gateway_customer_id = gateway_customer_id;
    let p_gateway_subscription_id = gateway_subscription_id;
    let p_reference_data = reference_data;
    let p_enabled = enabled;
    let p_license_key = license_key;
    let p_public_key = public_key;
    let p_private_key = private_key;
    let p_two_factor_providers = two_factor_providers;
    let p_expiration_date = expiration_date;
    let p_creation_date = creation_date;
    let p_revision_date = revision_date;
    let p_max_autoscale_seats = max_autoscale_seats;
    let p_owners_notified_of_autoscaling = owners_notified_of_autoscaling;
    let p_status = status;
    let p_use_password_manager = use_password_manager;
    let p_sm_seats = sm_seats;
    let p_sm_service_accounts = sm_service_accounts;
    let p_max_autoscale_sm_seats = max_autoscale_sm_seats;
    let p_max_autoscale_sm_service_accounts = max_autoscale_sm_service_accounts;
    let p_limit_collection_creation = limit_collection_creation;
    let p_limit_collection_deletion = limit_collection_deletion;
    let p_allow_admin_access_to_all_collection_items = allow_admin_access_to_all_collection_items;
    let p_limit_item_deletion = limit_item_deletion;
    let p_use_risk_insights = use_risk_insights;
    let p_use_organization_domains = use_organization_domains;
    let p_use_admin_sponsored_families = use_admin_sponsored_families;
    let p_sync_seats = sync_seats;

    let uri_str = format!(
        "{}/organizations/{organizationId}/billing/vnext/payment-method",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_id {
        req_builder = req_builder.query(&[("id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_identifier {
        req_builder = req_builder.query(&[("identifier", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_name {
        req_builder = req_builder.query(&[("businessName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address1 {
        req_builder = req_builder.query(&[("businessAddress1", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address2 {
        req_builder = req_builder.query(&[("businessAddress2", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address3 {
        req_builder = req_builder.query(&[("businessAddress3", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_country {
        req_builder = req_builder.query(&[("businessCountry", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_tax_number {
        req_builder = req_builder.query(&[("businessTaxNumber", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_billing_email {
        req_builder = req_builder.query(&[("billingEmail", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan {
        req_builder = req_builder.query(&[("plan", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan_type {
        req_builder = req_builder.query(&[("planType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_seats {
        req_builder = req_builder.query(&[("seats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_collections {
        req_builder = req_builder.query(&[("maxCollections", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_policies {
        req_builder = req_builder.query(&[("usePolicies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_sso {
        req_builder = req_builder.query(&[("useSso", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_key_connector {
        req_builder = req_builder.query(&[("useKeyConnector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_scim {
        req_builder = req_builder.query(&[("useScim", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_groups {
        req_builder = req_builder.query(&[("useGroups", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_directory {
        req_builder = req_builder.query(&[("useDirectory", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_events {
        req_builder = req_builder.query(&[("useEvents", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_totp {
        req_builder = req_builder.query(&[("useTotp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use2fa {
        req_builder = req_builder.query(&[("use2fa", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_api {
        req_builder = req_builder.query(&[("useApi", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_reset_password {
        req_builder = req_builder.query(&[("useResetPassword", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_secrets_manager {
        req_builder = req_builder.query(&[("useSecretsManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_self_host {
        req_builder = req_builder.query(&[("selfHost", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_users_get_premium {
        req_builder = req_builder.query(&[("usersGetPremium", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_custom_permissions {
        req_builder = req_builder.query(&[("useCustomPermissions", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_storage {
        req_builder = req_builder.query(&[("storage", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_storage_gb {
        req_builder = req_builder.query(&[("maxStorageGb", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway {
        req_builder = req_builder.query(&[("gateway", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_customer_id {
        req_builder = req_builder.query(&[("gatewayCustomerId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_subscription_id {
        req_builder = req_builder.query(&[("gatewaySubscriptionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_reference_data {
        req_builder = req_builder.query(&[("referenceData", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_enabled {
        req_builder = req_builder.query(&[("enabled", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_license_key {
        req_builder = req_builder.query(&[("licenseKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_public_key {
        req_builder = req_builder.query(&[("publicKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_private_key {
        req_builder = req_builder.query(&[("privateKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_two_factor_providers {
        req_builder = req_builder.query(&[("twoFactorProviders", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_expiration_date {
        req_builder = req_builder.query(&[("expirationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_creation_date {
        req_builder = req_builder.query(&[("creationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_revision_date {
        req_builder = req_builder.query(&[("revisionDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_owners_notified_of_autoscaling {
        req_builder =
            req_builder.query(&[("ownersNotifiedOfAutoscaling", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_password_manager {
        req_builder = req_builder.query(&[("usePasswordManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_seats {
        req_builder = req_builder.query(&[("smSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_service_accounts {
        req_builder = req_builder.query(&[("smServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSmSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_service_accounts {
        req_builder =
            req_builder.query(&[("maxAutoscaleSmServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_creation {
        req_builder = req_builder.query(&[("limitCollectionCreation", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_deletion {
        req_builder = req_builder.query(&[("limitCollectionDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allow_admin_access_to_all_collection_items {
        req_builder = req_builder.query(&[(
            "allowAdminAccessToAllCollectionItems",
            &param_value.to_string(),
        )]);
    }
    if let Some(ref param_value) = p_limit_item_deletion {
        req_builder = req_builder.query(&[("limitItemDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_risk_insights {
        req_builder = req_builder.query(&[("useRiskInsights", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_organization_domains {
        req_builder = req_builder.query(&[("useOrganizationDomains", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_admin_sponsored_families {
        req_builder = req_builder.query(&[("useAdminSponsoredFamilies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sync_seats {
        req_builder = req_builder.query(&[("syncSeats", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationsOrganizationIdBillingVnextPaymentMethodGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organizations_organization_id_billing_vnext_payment_method_put(
    configuration: &configuration::Configuration,
    organization_id: &str,
    id: Option<uuid::Uuid>,
    identifier: Option<&str>,
    name: Option<&str>,
    business_name: Option<&str>,
    business_address1: Option<&str>,
    business_address2: Option<&str>,
    business_address3: Option<&str>,
    business_country: Option<&str>,
    business_tax_number: Option<&str>,
    billing_email: Option<&str>,
    plan: Option<&str>,
    plan_type: Option<models::PlanType>,
    seats: Option<i32>,
    max_collections: Option<i32>,
    use_policies: Option<bool>,
    use_sso: Option<bool>,
    use_key_connector: Option<bool>,
    use_scim: Option<bool>,
    use_groups: Option<bool>,
    use_directory: Option<bool>,
    use_events: Option<bool>,
    use_totp: Option<bool>,
    use2fa: Option<bool>,
    use_api: Option<bool>,
    use_reset_password: Option<bool>,
    use_secrets_manager: Option<bool>,
    self_host: Option<bool>,
    users_get_premium: Option<bool>,
    use_custom_permissions: Option<bool>,
    storage: Option<i64>,
    max_storage_gb: Option<i32>,
    gateway: Option<models::GatewayType>,
    gateway_customer_id: Option<&str>,
    gateway_subscription_id: Option<&str>,
    reference_data: Option<&str>,
    enabled: Option<bool>,
    license_key: Option<&str>,
    public_key: Option<&str>,
    private_key: Option<&str>,
    two_factor_providers: Option<&str>,
    expiration_date: Option<String>,
    creation_date: Option<String>,
    revision_date: Option<String>,
    max_autoscale_seats: Option<i32>,
    owners_notified_of_autoscaling: Option<String>,
    status: Option<models::OrganizationStatusType>,
    use_password_manager: Option<bool>,
    sm_seats: Option<i32>,
    sm_service_accounts: Option<i32>,
    max_autoscale_sm_seats: Option<i32>,
    max_autoscale_sm_service_accounts: Option<i32>,
    limit_collection_creation: Option<bool>,
    limit_collection_deletion: Option<bool>,
    allow_admin_access_to_all_collection_items: Option<bool>,
    limit_item_deletion: Option<bool>,
    use_risk_insights: Option<bool>,
    use_organization_domains: Option<bool>,
    use_admin_sponsored_families: Option<bool>,
    sync_seats: Option<bool>,
    tokenized_payment_method_request: Option<models::TokenizedPaymentMethodRequest>,
) -> Result<(), Error<OrganizationsOrganizationIdBillingVnextPaymentMethodPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_id = id;
    let p_identifier = identifier;
    let p_name = name;
    let p_business_name = business_name;
    let p_business_address1 = business_address1;
    let p_business_address2 = business_address2;
    let p_business_address3 = business_address3;
    let p_business_country = business_country;
    let p_business_tax_number = business_tax_number;
    let p_billing_email = billing_email;
    let p_plan = plan;
    let p_plan_type = plan_type;
    let p_seats = seats;
    let p_max_collections = max_collections;
    let p_use_policies = use_policies;
    let p_use_sso = use_sso;
    let p_use_key_connector = use_key_connector;
    let p_use_scim = use_scim;
    let p_use_groups = use_groups;
    let p_use_directory = use_directory;
    let p_use_events = use_events;
    let p_use_totp = use_totp;
    let p_use2fa = use2fa;
    let p_use_api = use_api;
    let p_use_reset_password = use_reset_password;
    let p_use_secrets_manager = use_secrets_manager;
    let p_self_host = self_host;
    let p_users_get_premium = users_get_premium;
    let p_use_custom_permissions = use_custom_permissions;
    let p_storage = storage;
    let p_max_storage_gb = max_storage_gb;
    let p_gateway = gateway;
    let p_gateway_customer_id = gateway_customer_id;
    let p_gateway_subscription_id = gateway_subscription_id;
    let p_reference_data = reference_data;
    let p_enabled = enabled;
    let p_license_key = license_key;
    let p_public_key = public_key;
    let p_private_key = private_key;
    let p_two_factor_providers = two_factor_providers;
    let p_expiration_date = expiration_date;
    let p_creation_date = creation_date;
    let p_revision_date = revision_date;
    let p_max_autoscale_seats = max_autoscale_seats;
    let p_owners_notified_of_autoscaling = owners_notified_of_autoscaling;
    let p_status = status;
    let p_use_password_manager = use_password_manager;
    let p_sm_seats = sm_seats;
    let p_sm_service_accounts = sm_service_accounts;
    let p_max_autoscale_sm_seats = max_autoscale_sm_seats;
    let p_max_autoscale_sm_service_accounts = max_autoscale_sm_service_accounts;
    let p_limit_collection_creation = limit_collection_creation;
    let p_limit_collection_deletion = limit_collection_deletion;
    let p_allow_admin_access_to_all_collection_items = allow_admin_access_to_all_collection_items;
    let p_limit_item_deletion = limit_item_deletion;
    let p_use_risk_insights = use_risk_insights;
    let p_use_organization_domains = use_organization_domains;
    let p_use_admin_sponsored_families = use_admin_sponsored_families;
    let p_sync_seats = sync_seats;
    let p_tokenized_payment_method_request = tokenized_payment_method_request;

    let uri_str = format!(
        "{}/organizations/{organizationId}/billing/vnext/payment-method",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = p_id {
        req_builder = req_builder.query(&[("id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_identifier {
        req_builder = req_builder.query(&[("identifier", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_name {
        req_builder = req_builder.query(&[("businessName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address1 {
        req_builder = req_builder.query(&[("businessAddress1", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address2 {
        req_builder = req_builder.query(&[("businessAddress2", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address3 {
        req_builder = req_builder.query(&[("businessAddress3", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_country {
        req_builder = req_builder.query(&[("businessCountry", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_tax_number {
        req_builder = req_builder.query(&[("businessTaxNumber", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_billing_email {
        req_builder = req_builder.query(&[("billingEmail", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan {
        req_builder = req_builder.query(&[("plan", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan_type {
        req_builder = req_builder.query(&[("planType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_seats {
        req_builder = req_builder.query(&[("seats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_collections {
        req_builder = req_builder.query(&[("maxCollections", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_policies {
        req_builder = req_builder.query(&[("usePolicies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_sso {
        req_builder = req_builder.query(&[("useSso", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_key_connector {
        req_builder = req_builder.query(&[("useKeyConnector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_scim {
        req_builder = req_builder.query(&[("useScim", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_groups {
        req_builder = req_builder.query(&[("useGroups", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_directory {
        req_builder = req_builder.query(&[("useDirectory", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_events {
        req_builder = req_builder.query(&[("useEvents", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_totp {
        req_builder = req_builder.query(&[("useTotp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use2fa {
        req_builder = req_builder.query(&[("use2fa", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_api {
        req_builder = req_builder.query(&[("useApi", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_reset_password {
        req_builder = req_builder.query(&[("useResetPassword", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_secrets_manager {
        req_builder = req_builder.query(&[("useSecretsManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_self_host {
        req_builder = req_builder.query(&[("selfHost", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_users_get_premium {
        req_builder = req_builder.query(&[("usersGetPremium", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_custom_permissions {
        req_builder = req_builder.query(&[("useCustomPermissions", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_storage {
        req_builder = req_builder.query(&[("storage", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_storage_gb {
        req_builder = req_builder.query(&[("maxStorageGb", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway {
        req_builder = req_builder.query(&[("gateway", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_customer_id {
        req_builder = req_builder.query(&[("gatewayCustomerId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_subscription_id {
        req_builder = req_builder.query(&[("gatewaySubscriptionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_reference_data {
        req_builder = req_builder.query(&[("referenceData", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_enabled {
        req_builder = req_builder.query(&[("enabled", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_license_key {
        req_builder = req_builder.query(&[("licenseKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_public_key {
        req_builder = req_builder.query(&[("publicKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_private_key {
        req_builder = req_builder.query(&[("privateKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_two_factor_providers {
        req_builder = req_builder.query(&[("twoFactorProviders", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_expiration_date {
        req_builder = req_builder.query(&[("expirationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_creation_date {
        req_builder = req_builder.query(&[("creationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_revision_date {
        req_builder = req_builder.query(&[("revisionDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_owners_notified_of_autoscaling {
        req_builder =
            req_builder.query(&[("ownersNotifiedOfAutoscaling", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_password_manager {
        req_builder = req_builder.query(&[("usePasswordManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_seats {
        req_builder = req_builder.query(&[("smSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_service_accounts {
        req_builder = req_builder.query(&[("smServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSmSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_service_accounts {
        req_builder =
            req_builder.query(&[("maxAutoscaleSmServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_creation {
        req_builder = req_builder.query(&[("limitCollectionCreation", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_deletion {
        req_builder = req_builder.query(&[("limitCollectionDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allow_admin_access_to_all_collection_items {
        req_builder = req_builder.query(&[(
            "allowAdminAccessToAllCollectionItems",
            &param_value.to_string(),
        )]);
    }
    if let Some(ref param_value) = p_limit_item_deletion {
        req_builder = req_builder.query(&[("limitItemDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_risk_insights {
        req_builder = req_builder.query(&[("useRiskInsights", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_organization_domains {
        req_builder = req_builder.query(&[("useOrganizationDomains", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_admin_sponsored_families {
        req_builder = req_builder.query(&[("useAdminSponsoredFamilies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sync_seats {
        req_builder = req_builder.query(&[("syncSeats", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_tokenized_payment_method_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationsOrganizationIdBillingVnextPaymentMethodPutError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organizations_organization_id_billing_vnext_payment_method_verify_bank_account_post(
    configuration: &configuration::Configuration,
    organization_id: &str,
    id: Option<uuid::Uuid>,
    identifier: Option<&str>,
    name: Option<&str>,
    business_name: Option<&str>,
    business_address1: Option<&str>,
    business_address2: Option<&str>,
    business_address3: Option<&str>,
    business_country: Option<&str>,
    business_tax_number: Option<&str>,
    billing_email: Option<&str>,
    plan: Option<&str>,
    plan_type: Option<models::PlanType>,
    seats: Option<i32>,
    max_collections: Option<i32>,
    use_policies: Option<bool>,
    use_sso: Option<bool>,
    use_key_connector: Option<bool>,
    use_scim: Option<bool>,
    use_groups: Option<bool>,
    use_directory: Option<bool>,
    use_events: Option<bool>,
    use_totp: Option<bool>,
    use2fa: Option<bool>,
    use_api: Option<bool>,
    use_reset_password: Option<bool>,
    use_secrets_manager: Option<bool>,
    self_host: Option<bool>,
    users_get_premium: Option<bool>,
    use_custom_permissions: Option<bool>,
    storage: Option<i64>,
    max_storage_gb: Option<i32>,
    gateway: Option<models::GatewayType>,
    gateway_customer_id: Option<&str>,
    gateway_subscription_id: Option<&str>,
    reference_data: Option<&str>,
    enabled: Option<bool>,
    license_key: Option<&str>,
    public_key: Option<&str>,
    private_key: Option<&str>,
    two_factor_providers: Option<&str>,
    expiration_date: Option<String>,
    creation_date: Option<String>,
    revision_date: Option<String>,
    max_autoscale_seats: Option<i32>,
    owners_notified_of_autoscaling: Option<String>,
    status: Option<models::OrganizationStatusType>,
    use_password_manager: Option<bool>,
    sm_seats: Option<i32>,
    sm_service_accounts: Option<i32>,
    max_autoscale_sm_seats: Option<i32>,
    max_autoscale_sm_service_accounts: Option<i32>,
    limit_collection_creation: Option<bool>,
    limit_collection_deletion: Option<bool>,
    allow_admin_access_to_all_collection_items: Option<bool>,
    limit_item_deletion: Option<bool>,
    use_risk_insights: Option<bool>,
    use_organization_domains: Option<bool>,
    use_admin_sponsored_families: Option<bool>,
    sync_seats: Option<bool>,
    verify_bank_account_request: Option<models::VerifyBankAccountRequest>,
) -> Result<(), Error<OrganizationsOrganizationIdBillingVnextPaymentMethodVerifyBankAccountPostError>>
{
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_id = id;
    let p_identifier = identifier;
    let p_name = name;
    let p_business_name = business_name;
    let p_business_address1 = business_address1;
    let p_business_address2 = business_address2;
    let p_business_address3 = business_address3;
    let p_business_country = business_country;
    let p_business_tax_number = business_tax_number;
    let p_billing_email = billing_email;
    let p_plan = plan;
    let p_plan_type = plan_type;
    let p_seats = seats;
    let p_max_collections = max_collections;
    let p_use_policies = use_policies;
    let p_use_sso = use_sso;
    let p_use_key_connector = use_key_connector;
    let p_use_scim = use_scim;
    let p_use_groups = use_groups;
    let p_use_directory = use_directory;
    let p_use_events = use_events;
    let p_use_totp = use_totp;
    let p_use2fa = use2fa;
    let p_use_api = use_api;
    let p_use_reset_password = use_reset_password;
    let p_use_secrets_manager = use_secrets_manager;
    let p_self_host = self_host;
    let p_users_get_premium = users_get_premium;
    let p_use_custom_permissions = use_custom_permissions;
    let p_storage = storage;
    let p_max_storage_gb = max_storage_gb;
    let p_gateway = gateway;
    let p_gateway_customer_id = gateway_customer_id;
    let p_gateway_subscription_id = gateway_subscription_id;
    let p_reference_data = reference_data;
    let p_enabled = enabled;
    let p_license_key = license_key;
    let p_public_key = public_key;
    let p_private_key = private_key;
    let p_two_factor_providers = two_factor_providers;
    let p_expiration_date = expiration_date;
    let p_creation_date = creation_date;
    let p_revision_date = revision_date;
    let p_max_autoscale_seats = max_autoscale_seats;
    let p_owners_notified_of_autoscaling = owners_notified_of_autoscaling;
    let p_status = status;
    let p_use_password_manager = use_password_manager;
    let p_sm_seats = sm_seats;
    let p_sm_service_accounts = sm_service_accounts;
    let p_max_autoscale_sm_seats = max_autoscale_sm_seats;
    let p_max_autoscale_sm_service_accounts = max_autoscale_sm_service_accounts;
    let p_limit_collection_creation = limit_collection_creation;
    let p_limit_collection_deletion = limit_collection_deletion;
    let p_allow_admin_access_to_all_collection_items = allow_admin_access_to_all_collection_items;
    let p_limit_item_deletion = limit_item_deletion;
    let p_use_risk_insights = use_risk_insights;
    let p_use_organization_domains = use_organization_domains;
    let p_use_admin_sponsored_families = use_admin_sponsored_families;
    let p_sync_seats = sync_seats;
    let p_verify_bank_account_request = verify_bank_account_request;

    let uri_str = format!(
        "{}/organizations/{organizationId}/billing/vnext/payment-method/verify-bank-account",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_id {
        req_builder = req_builder.query(&[("id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_identifier {
        req_builder = req_builder.query(&[("identifier", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_name {
        req_builder = req_builder.query(&[("businessName", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address1 {
        req_builder = req_builder.query(&[("businessAddress1", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address2 {
        req_builder = req_builder.query(&[("businessAddress2", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_address3 {
        req_builder = req_builder.query(&[("businessAddress3", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_country {
        req_builder = req_builder.query(&[("businessCountry", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_business_tax_number {
        req_builder = req_builder.query(&[("businessTaxNumber", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_billing_email {
        req_builder = req_builder.query(&[("billingEmail", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan {
        req_builder = req_builder.query(&[("plan", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_plan_type {
        req_builder = req_builder.query(&[("planType", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_seats {
        req_builder = req_builder.query(&[("seats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_collections {
        req_builder = req_builder.query(&[("maxCollections", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_policies {
        req_builder = req_builder.query(&[("usePolicies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_sso {
        req_builder = req_builder.query(&[("useSso", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_key_connector {
        req_builder = req_builder.query(&[("useKeyConnector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_scim {
        req_builder = req_builder.query(&[("useScim", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_groups {
        req_builder = req_builder.query(&[("useGroups", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_directory {
        req_builder = req_builder.query(&[("useDirectory", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_events {
        req_builder = req_builder.query(&[("useEvents", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_totp {
        req_builder = req_builder.query(&[("useTotp", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use2fa {
        req_builder = req_builder.query(&[("use2fa", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_api {
        req_builder = req_builder.query(&[("useApi", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_reset_password {
        req_builder = req_builder.query(&[("useResetPassword", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_secrets_manager {
        req_builder = req_builder.query(&[("useSecretsManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_self_host {
        req_builder = req_builder.query(&[("selfHost", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_users_get_premium {
        req_builder = req_builder.query(&[("usersGetPremium", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_custom_permissions {
        req_builder = req_builder.query(&[("useCustomPermissions", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_storage {
        req_builder = req_builder.query(&[("storage", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_storage_gb {
        req_builder = req_builder.query(&[("maxStorageGb", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway {
        req_builder = req_builder.query(&[("gateway", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_customer_id {
        req_builder = req_builder.query(&[("gatewayCustomerId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_subscription_id {
        req_builder = req_builder.query(&[("gatewaySubscriptionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_reference_data {
        req_builder = req_builder.query(&[("referenceData", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_enabled {
        req_builder = req_builder.query(&[("enabled", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_license_key {
        req_builder = req_builder.query(&[("licenseKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_public_key {
        req_builder = req_builder.query(&[("publicKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_private_key {
        req_builder = req_builder.query(&[("privateKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_two_factor_providers {
        req_builder = req_builder.query(&[("twoFactorProviders", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_expiration_date {
        req_builder = req_builder.query(&[("expirationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_creation_date {
        req_builder = req_builder.query(&[("creationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_revision_date {
        req_builder = req_builder.query(&[("revisionDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_owners_notified_of_autoscaling {
        req_builder =
            req_builder.query(&[("ownersNotifiedOfAutoscaling", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_status {
        req_builder = req_builder.query(&[("status", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_password_manager {
        req_builder = req_builder.query(&[("usePasswordManager", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_seats {
        req_builder = req_builder.query(&[("smSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sm_service_accounts {
        req_builder = req_builder.query(&[("smServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_seats {
        req_builder = req_builder.query(&[("maxAutoscaleSmSeats", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_autoscale_sm_service_accounts {
        req_builder =
            req_builder.query(&[("maxAutoscaleSmServiceAccounts", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_creation {
        req_builder = req_builder.query(&[("limitCollectionCreation", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit_collection_deletion {
        req_builder = req_builder.query(&[("limitCollectionDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_allow_admin_access_to_all_collection_items {
        req_builder = req_builder.query(&[(
            "allowAdminAccessToAllCollectionItems",
            &param_value.to_string(),
        )]);
    }
    if let Some(ref param_value) = p_limit_item_deletion {
        req_builder = req_builder.query(&[("limitItemDeletion", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_risk_insights {
        req_builder = req_builder.query(&[("useRiskInsights", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_organization_domains {
        req_builder = req_builder.query(&[("useOrganizationDomains", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_use_admin_sponsored_families {
        req_builder = req_builder.query(&[("useAdminSponsoredFamilies", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sync_seats {
        req_builder = req_builder.query(&[("syncSeats", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_verify_bank_account_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<
            OrganizationsOrganizationIdBillingVnextPaymentMethodVerifyBankAccountPostError,
        > = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

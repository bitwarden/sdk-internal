/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`providers_provider_id_users_confirm_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersConfirmPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_delete_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersDeletePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_id_accept_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersIdAcceptPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_id_confirm_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersIdConfirmPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersIdDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_id_delete_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersIdDeletePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersIdPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersIdPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_id_reinvite_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersIdReinvitePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_invite_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersInvitePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_public_keys_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersPublicKeysPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_users_reinvite_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdUsersReinvitePostError {
    UnknownValue(serde_json::Value),
}

pub async fn providers_provider_id_users_confirm_post(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    provider_user_bulk_confirm_request_model: Option<models::ProviderUserBulkConfirmRequestModel>,
) -> Result<
    models::ProviderUserBulkResponseModelListResponseModel,
    Error<ProvidersProviderIdUsersConfirmPostError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_provider_user_bulk_confirm_request_model = provider_user_bulk_confirm_request_model;

    let uri_str = format!(
        "{}/providers/{providerId}/users/confirm",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_provider_user_bulk_confirm_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ProviderUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ProviderUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersConfirmPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_delete(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    provider_user_bulk_request_model: Option<models::ProviderUserBulkRequestModel>,
) -> Result<
    models::ProviderUserBulkResponseModelListResponseModel,
    Error<ProvidersProviderIdUsersDeleteError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_provider_user_bulk_request_model = provider_user_bulk_request_model;

    let uri_str = format!(
        "{}/providers/{providerId}/users",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_provider_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ProviderUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ProviderUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersDeleteError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_delete_post(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    provider_user_bulk_request_model: Option<models::ProviderUserBulkRequestModel>,
) -> Result<
    models::ProviderUserBulkResponseModelListResponseModel,
    Error<ProvidersProviderIdUsersDeletePostError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_provider_user_bulk_request_model = provider_user_bulk_request_model;

    let uri_str = format!(
        "{}/providers/{providerId}/users/delete",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_provider_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ProviderUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ProviderUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersDeletePostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_get(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
) -> Result<
    models::ProviderUserUserDetailsResponseModelListResponseModel,
    Error<ProvidersProviderIdUsersGetError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;

    let uri_str = format!(
        "{}/providers/{providerId}/users",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ProviderUserUserDetailsResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ProviderUserUserDetailsResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_id_accept_post(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    id: uuid::Uuid,
    provider_user_accept_request_model: Option<models::ProviderUserAcceptRequestModel>,
) -> Result<(), Error<ProvidersProviderIdUsersIdAcceptPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_id = id;
    let p_provider_user_accept_request_model = provider_user_accept_request_model;

    let uri_str = format!(
        "{}/providers/{providerId}/users/{id}/accept",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_provider_user_accept_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersIdAcceptPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_id_confirm_post(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    id: uuid::Uuid,
    provider_user_confirm_request_model: Option<models::ProviderUserConfirmRequestModel>,
) -> Result<(), Error<ProvidersProviderIdUsersIdConfirmPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_id = id;
    let p_provider_user_confirm_request_model = provider_user_confirm_request_model;

    let uri_str = format!(
        "{}/providers/{providerId}/users/{id}/confirm",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_provider_user_confirm_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersIdConfirmPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_id_delete(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<ProvidersProviderIdUsersIdDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_id = id;

    let uri_str = format!(
        "{}/providers/{providerId}/users/{id}",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersIdDeleteError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_id_delete_post(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<ProvidersProviderIdUsersIdDeletePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_id = id;

    let uri_str = format!(
        "{}/providers/{providerId}/users/{id}/delete",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersIdDeletePostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_id_get(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<models::ProviderUserResponseModel, Error<ProvidersProviderIdUsersIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_id = id;

    let uri_str = format!(
        "{}/providers/{providerId}/users/{id}",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ProviderUserResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ProviderUserResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersIdGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_id_post(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    id: uuid::Uuid,
    provider_user_update_request_model: Option<models::ProviderUserUpdateRequestModel>,
) -> Result<(), Error<ProvidersProviderIdUsersIdPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_id = id;
    let p_provider_user_update_request_model = provider_user_update_request_model;

    let uri_str = format!(
        "{}/providers/{providerId}/users/{id}",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_provider_user_update_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersIdPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_id_put(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    id: uuid::Uuid,
    provider_user_update_request_model: Option<models::ProviderUserUpdateRequestModel>,
) -> Result<(), Error<ProvidersProviderIdUsersIdPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_id = id;
    let p_provider_user_update_request_model = provider_user_update_request_model;

    let uri_str = format!(
        "{}/providers/{providerId}/users/{id}",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_provider_user_update_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersIdPutError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_id_reinvite_post(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<ProvidersProviderIdUsersIdReinvitePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_id = id;

    let uri_str = format!(
        "{}/providers/{providerId}/users/{id}/reinvite",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersIdReinvitePostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_invite_post(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    provider_user_invite_request_model: Option<models::ProviderUserInviteRequestModel>,
) -> Result<(), Error<ProvidersProviderIdUsersInvitePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_provider_user_invite_request_model = provider_user_invite_request_model;

    let uri_str = format!(
        "{}/providers/{providerId}/users/invite",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_provider_user_invite_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersInvitePostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_public_keys_post(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    provider_user_bulk_request_model: Option<models::ProviderUserBulkRequestModel>,
) -> Result<
    models::ProviderUserPublicKeyResponseModelListResponseModel,
    Error<ProvidersProviderIdUsersPublicKeysPostError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_provider_user_bulk_request_model = provider_user_bulk_request_model;

    let uri_str = format!(
        "{}/providers/{providerId}/users/public-keys",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_provider_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ProviderUserPublicKeyResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ProviderUserPublicKeyResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersPublicKeysPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_users_reinvite_post(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    provider_user_bulk_request_model: Option<models::ProviderUserBulkRequestModel>,
) -> Result<
    models::ProviderUserBulkResponseModelListResponseModel,
    Error<ProvidersProviderIdUsersReinvitePostError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_provider_user_bulk_request_model = provider_user_bulk_request_model;

    let uri_str = format!(
        "{}/providers/{providerId}/users/reinvite",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_provider_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ProviderUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ProviderUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdUsersReinvitePostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

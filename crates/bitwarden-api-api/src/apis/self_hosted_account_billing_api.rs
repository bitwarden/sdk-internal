/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`self_hosted_account_billing_upload_license`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SelfHostedAccountBillingUploadLicenseError {
    UnknownValue(serde_json::Value),
}

pub async fn self_hosted_account_billing_upload_license(
    configuration: &configuration::Configuration,
    email: &str,
    security_stamp: &str,
    api_key: &str,
    license: std::path::PathBuf,
    id: Option<uuid::Uuid>,
    name: Option<&str>,
    email_verified: Option<bool>,
    master_password: Option<&str>,
    master_password_hint: Option<&str>,
    culture: Option<&str>,
    two_factor_providers: Option<&str>,
    two_factor_recovery_code: Option<&str>,
    equivalent_domains: Option<&str>,
    excluded_global_equivalent_domains: Option<&str>,
    account_revision_date: Option<String>,
    key: Option<&str>,
    public_key: Option<&str>,
    private_key: Option<&str>,
    premium: Option<bool>,
    premium_expiration_date: Option<String>,
    renewal_reminder_date: Option<String>,
    storage: Option<i64>,
    max_storage_gb: Option<i32>,
    gateway: Option<models::GatewayType>,
    gateway_customer_id: Option<&str>,
    gateway_subscription_id: Option<&str>,
    reference_data: Option<&str>,
    license_key: Option<&str>,
    kdf: Option<models::KdfType>,
    kdf_iterations: Option<i32>,
    kdf_memory: Option<i32>,
    kdf_parallelism: Option<i32>,
    creation_date: Option<String>,
    revision_date: Option<String>,
    force_password_reset: Option<bool>,
    uses_key_connector: Option<bool>,
    failed_login_count: Option<i32>,
    last_failed_login_date: Option<String>,
    avatar_color: Option<&str>,
    last_password_change_date: Option<String>,
    last_kdf_change_date: Option<String>,
    last_key_rotation_date: Option<String>,
    last_email_change_date: Option<String>,
    verify_devices: Option<bool>,
) -> Result<(), Error<SelfHostedAccountBillingUploadLicenseError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_email = email;
    let p_security_stamp = security_stamp;
    let p_api_key = api_key;
    let p_license = license;
    let p_id = id;
    let p_name = name;
    let p_email_verified = email_verified;
    let p_master_password = master_password;
    let p_master_password_hint = master_password_hint;
    let p_culture = culture;
    let p_two_factor_providers = two_factor_providers;
    let p_two_factor_recovery_code = two_factor_recovery_code;
    let p_equivalent_domains = equivalent_domains;
    let p_excluded_global_equivalent_domains = excluded_global_equivalent_domains;
    let p_account_revision_date = account_revision_date;
    let p_key = key;
    let p_public_key = public_key;
    let p_private_key = private_key;
    let p_premium = premium;
    let p_premium_expiration_date = premium_expiration_date;
    let p_renewal_reminder_date = renewal_reminder_date;
    let p_storage = storage;
    let p_max_storage_gb = max_storage_gb;
    let p_gateway = gateway;
    let p_gateway_customer_id = gateway_customer_id;
    let p_gateway_subscription_id = gateway_subscription_id;
    let p_reference_data = reference_data;
    let p_license_key = license_key;
    let p_kdf = kdf;
    let p_kdf_iterations = kdf_iterations;
    let p_kdf_memory = kdf_memory;
    let p_kdf_parallelism = kdf_parallelism;
    let p_creation_date = creation_date;
    let p_revision_date = revision_date;
    let p_force_password_reset = force_password_reset;
    let p_uses_key_connector = uses_key_connector;
    let p_failed_login_count = failed_login_count;
    let p_last_failed_login_date = last_failed_login_date;
    let p_avatar_color = avatar_color;
    let p_last_password_change_date = last_password_change_date;
    let p_last_kdf_change_date = last_kdf_change_date;
    let p_last_key_rotation_date = last_key_rotation_date;
    let p_last_email_change_date = last_email_change_date;
    let p_verify_devices = verify_devices;

    let uri_str = format!(
        "{}/account/billing/vnext/self-host/license",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_id {
        req_builder = req_builder.query(&[("id", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_name {
        req_builder = req_builder.query(&[("name", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("email", &p_email.to_string())]);
    if let Some(ref param_value) = p_email_verified {
        req_builder = req_builder.query(&[("emailVerified", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_master_password {
        req_builder = req_builder.query(&[("masterPassword", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_master_password_hint {
        req_builder = req_builder.query(&[("masterPasswordHint", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_culture {
        req_builder = req_builder.query(&[("culture", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("securityStamp", &p_security_stamp.to_string())]);
    if let Some(ref param_value) = p_two_factor_providers {
        req_builder = req_builder.query(&[("twoFactorProviders", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_two_factor_recovery_code {
        req_builder = req_builder.query(&[("twoFactorRecoveryCode", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_equivalent_domains {
        req_builder = req_builder.query(&[("equivalentDomains", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_excluded_global_equivalent_domains {
        req_builder =
            req_builder.query(&[("excludedGlobalEquivalentDomains", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_account_revision_date {
        req_builder = req_builder.query(&[("accountRevisionDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_key {
        req_builder = req_builder.query(&[("key", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_public_key {
        req_builder = req_builder.query(&[("publicKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_private_key {
        req_builder = req_builder.query(&[("privateKey", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_premium {
        req_builder = req_builder.query(&[("premium", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_premium_expiration_date {
        req_builder = req_builder.query(&[("premiumExpirationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_renewal_reminder_date {
        req_builder = req_builder.query(&[("renewalReminderDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_storage {
        req_builder = req_builder.query(&[("storage", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_max_storage_gb {
        req_builder = req_builder.query(&[("maxStorageGb", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway {
        req_builder = req_builder.query(&[("gateway", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_customer_id {
        req_builder = req_builder.query(&[("gatewayCustomerId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_gateway_subscription_id {
        req_builder = req_builder.query(&[("gatewaySubscriptionId", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_reference_data {
        req_builder = req_builder.query(&[("referenceData", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_license_key {
        req_builder = req_builder.query(&[("licenseKey", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("apiKey", &p_api_key.to_string())]);
    if let Some(ref param_value) = p_kdf {
        req_builder = req_builder.query(&[("kdf", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_kdf_iterations {
        req_builder = req_builder.query(&[("kdfIterations", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_kdf_memory {
        req_builder = req_builder.query(&[("kdfMemory", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_kdf_parallelism {
        req_builder = req_builder.query(&[("kdfParallelism", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_creation_date {
        req_builder = req_builder.query(&[("creationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_revision_date {
        req_builder = req_builder.query(&[("revisionDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_force_password_reset {
        req_builder = req_builder.query(&[("forcePasswordReset", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_uses_key_connector {
        req_builder = req_builder.query(&[("usesKeyConnector", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_failed_login_count {
        req_builder = req_builder.query(&[("failedLoginCount", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_last_failed_login_date {
        req_builder = req_builder.query(&[("lastFailedLoginDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_avatar_color {
        req_builder = req_builder.query(&[("avatarColor", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_last_password_change_date {
        req_builder = req_builder.query(&[("lastPasswordChangeDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_last_kdf_change_date {
        req_builder = req_builder.query(&[("lastKdfChangeDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_last_key_rotation_date {
        req_builder = req_builder.query(&[("lastKeyRotationDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_last_email_change_date {
        req_builder = req_builder.query(&[("lastEmailChangeDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_verify_devices {
        req_builder = req_builder.query(&[("verifyDevices", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut multipart_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'license' parameter
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<SelfHostedAccountBillingUploadLicenseError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

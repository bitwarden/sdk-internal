/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`organization_sponsorship_self_hosted_org_id_sponsored_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipSelfHostedOrgIdSponsoredGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method
/// [`organization_sponsorship_self_hosted_sponsoring_org_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipSelfHostedSponsoringOrgIdDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method
/// [`organization_sponsorship_self_hosted_sponsoring_org_id_delete_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipSelfHostedSponsoringOrgIdDeletePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method
/// [`organization_sponsorship_self_hosted_sponsoring_org_id_families_for_enterprise_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipSelfHostedSponsoringOrgIdFamiliesForEnterprisePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method
/// [`organization_sponsorship_self_hosted_sponsoring_org_id_sponsored_friendly_name_revoke_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipSelfHostedSponsoringOrgIdSponsoredFriendlyNameRevokeDeleteError {
    UnknownValue(serde_json::Value),
}

pub async fn organization_sponsorship_self_hosted_org_id_sponsored_get(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
) -> Result<
    models::OrganizationSponsorshipInvitesResponseModelListResponseModel,
    Error<OrganizationSponsorshipSelfHostedOrgIdSponsoredGetError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;

    let uri_str = format!(
        "{}/organization/sponsorship/self-hosted/{orgId}/sponsored",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationSponsorshipInvitesResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationSponsorshipInvitesResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipSelfHostedOrgIdSponsoredGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorship_self_hosted_sponsoring_org_id_delete(
    configuration: &configuration::Configuration,
    sponsoring_org_id: uuid::Uuid,
) -> Result<(), Error<OrganizationSponsorshipSelfHostedSponsoringOrgIdDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsoring_org_id = sponsoring_org_id;

    let uri_str = format!(
        "{}/organization/sponsorship/self-hosted/{sponsoringOrgId}",
        configuration.base_path,
        sponsoringOrgId = crate::apis::urlencode(p_sponsoring_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipSelfHostedSponsoringOrgIdDeleteError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorship_self_hosted_sponsoring_org_id_delete_post(
    configuration: &configuration::Configuration,
    sponsoring_org_id: uuid::Uuid,
) -> Result<(), Error<OrganizationSponsorshipSelfHostedSponsoringOrgIdDeletePostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsoring_org_id = sponsoring_org_id;

    let uri_str = format!(
        "{}/organization/sponsorship/self-hosted/{sponsoringOrgId}/delete",
        configuration.base_path,
        sponsoringOrgId = crate::apis::urlencode(p_sponsoring_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipSelfHostedSponsoringOrgIdDeletePostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorship_self_hosted_sponsoring_org_id_families_for_enterprise_post(
    configuration: &configuration::Configuration,
    sponsoring_org_id: uuid::Uuid,
    organization_sponsorship_create_request_model: Option<
        models::OrganizationSponsorshipCreateRequestModel,
    >,
) -> Result<(), Error<OrganizationSponsorshipSelfHostedSponsoringOrgIdFamiliesForEnterprisePostError>>
{
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsoring_org_id = sponsoring_org_id;
    let p_organization_sponsorship_create_request_model =
        organization_sponsorship_create_request_model;

    let uri_str = format!(
        "{}/organization/sponsorship/self-hosted/{sponsoringOrgId}/families-for-enterprise",
        configuration.base_path,
        sponsoringOrgId = crate::apis::urlencode(p_sponsoring_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_sponsorship_create_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<
            OrganizationSponsorshipSelfHostedSponsoringOrgIdFamiliesForEnterprisePostError,
        > = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorship_self_hosted_sponsoring_org_id_sponsored_friendly_name_revoke_delete(
    configuration: &configuration::Configuration,
    sponsoring_org_id: uuid::Uuid,
    sponsored_friendly_name: &str,
) -> Result<
    (),
    Error<OrganizationSponsorshipSelfHostedSponsoringOrgIdSponsoredFriendlyNameRevokeDeleteError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsoring_org_id = sponsoring_org_id;
    let p_sponsored_friendly_name = sponsored_friendly_name;

    let uri_str = format!(
        "{}/organization/sponsorship/self-hosted/{sponsoringOrgId}/{sponsoredFriendlyName}/revoke",
        configuration.base_path,
        sponsoringOrgId = crate::apis::urlencode(p_sponsoring_org_id.to_string()),
        sponsoredFriendlyName = crate::apis::urlencode(p_sponsored_friendly_name)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<
            OrganizationSponsorshipSelfHostedSponsoringOrgIdSponsoredFriendlyNameRevokeDeleteError,
        > = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

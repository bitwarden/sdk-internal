/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;

use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};

use super::{Error, configuration};
use crate::{
    apis::{ContentType, ResponseContent},
    models,
};

#[cfg_attr(feature = "mockall", automock)]
#[async_trait(?Send)]
pub trait SelfHostedOrganizationSponsorshipsApi: Send + Sync {
    /// DELETE /organization/sponsorship/self-hosted/{sponsoringOrgId}/{sponsoredFriendlyName}/
    /// revoke
    async fn admin_initiated_revoke_sponsorship<'a>(
        &self,
        sponsoring_org_id: uuid::Uuid,
        sponsored_friendly_name: &'a str,
    ) -> Result<(), Error<AdminInitiatedRevokeSponsorshipError>>;

    /// POST /organization/sponsorship/self-hosted/{sponsoringOrgId}/families-for-enterprise
    async fn create_sponsorship<'a>(
        &self,
        sponsoring_org_id: uuid::Uuid,
        organization_sponsorship_create_request_model: Option<
            models::OrganizationSponsorshipCreateRequestModel,
        >,
    ) -> Result<(), Error<CreateSponsorshipError>>;

    /// GET /organization/sponsorship/self-hosted/{orgId}/sponsored
    async fn get_sponsored_organizations<'a>(
        &self,
        org_id: uuid::Uuid,
    ) -> Result<
        models::OrganizationSponsorshipInvitesResponseModelListResponseModel,
        Error<GetSponsoredOrganizationsError>,
    >;

    /// DELETE /organization/sponsorship/self-hosted/{sponsoringOrgId}
    async fn revoke_sponsorship<'a>(
        &self,
        sponsoring_org_id: uuid::Uuid,
    ) -> Result<(), Error<RevokeSponsorshipError>>;
}

pub struct SelfHostedOrganizationSponsorshipsApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl SelfHostedOrganizationSponsorshipsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

#[async_trait(?Send)]
impl SelfHostedOrganizationSponsorshipsApi for SelfHostedOrganizationSponsorshipsApiClient {
    async fn admin_initiated_revoke_sponsorship<'a>(
        &self,
        sponsoring_org_id: uuid::Uuid,
        sponsored_friendly_name: &'a str,
    ) -> Result<(), Error<AdminInitiatedRevokeSponsorshipError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/organization/sponsorship/self-hosted/{sponsoringOrgId}/{sponsoredFriendlyName}/revoke",
            local_var_configuration.base_path,
            sponsoringOrgId = sponsoring_org_id,
            sponsoredFriendlyName = crate::apis::urlencode(sponsored_friendly_name)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<AdminInitiatedRevokeSponsorshipError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn create_sponsorship<'a>(
        &self,
        sponsoring_org_id: uuid::Uuid,
        organization_sponsorship_create_request_model: Option<
            models::OrganizationSponsorshipCreateRequestModel,
        >,
    ) -> Result<(), Error<CreateSponsorshipError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/organization/sponsorship/self-hosted/{sponsoringOrgId}/families-for-enterprise",
            local_var_configuration.base_path,
            sponsoringOrgId = sponsoring_org_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder =
            local_var_req_builder.json(&organization_sponsorship_create_request_model);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<CreateSponsorshipError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_sponsored_organizations<'a>(
        &self,
        org_id: uuid::Uuid,
    ) -> Result<
        models::OrganizationSponsorshipInvitesResponseModelListResponseModel,
        Error<GetSponsoredOrganizationsError>,
    > {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/organization/sponsorship/self-hosted/{orgId}/sponsored",
            local_var_configuration.base_path,
            orgId = org_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to `models::OrganizationSponsorshipInvitesResponseModelListResponseModel`",
                    )));
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be converted to `models::OrganizationSponsorshipInvitesResponseModelListResponseModel`"
                    ))));
                }
            }
        } else {
            let local_var_entity: Option<GetSponsoredOrganizationsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn revoke_sponsorship<'a>(
        &self,
        sponsoring_org_id: uuid::Uuid,
    ) -> Result<(), Error<RevokeSponsorshipError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/organization/sponsorship/self-hosted/{sponsoringOrgId}",
            local_var_configuration.base_path,
            sponsoringOrgId = sponsoring_org_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<RevokeSponsorshipError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method
/// [`SelfHostedOrganizationSponsorshipsApi::admin_initiated_revoke_sponsorship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminInitiatedRevokeSponsorshipError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`SelfHostedOrganizationSponsorshipsApi::create_sponsorship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSponsorshipError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method
/// [`SelfHostedOrganizationSponsorshipsApi::get_sponsored_organizations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSponsoredOrganizationsError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`SelfHostedOrganizationSponsorshipsApi::revoke_sponsorship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RevokeSponsorshipError {
    UnknownValue(serde_json::Value),
}

/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;

use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};

use super::{Error, configuration};
use crate::{
    apis::{ContentType, ResponseContent},
    models,
};

#[cfg_attr(feature = "mockall", automock)]
#[async_trait(?Send)]
pub trait InvoicesApi: Send + Sync {
    /// POST /invoices/preview-organization
    async fn preview_invoice<'a>(
        &self,
        preview_organization_invoice_request_body: Option<
            models::PreviewOrganizationInvoiceRequestBody,
        >,
    ) -> Result<(), Error<PreviewInvoiceError>>;
}

pub struct InvoicesApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl InvoicesApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

#[async_trait(?Send)]
impl InvoicesApi for InvoicesApiClient {
    async fn preview_invoice<'a>(
        &self,
        preview_organization_invoice_request_body: Option<
            models::PreviewOrganizationInvoiceRequestBody,
        >,
    ) -> Result<(), Error<PreviewInvoiceError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/invoices/preview-organization",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder =
            local_var_req_builder.json(&preview_organization_invoice_request_body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<PreviewInvoiceError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`InvoicesApi::preview_invoice`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PreviewInvoiceError {
    UnknownValue(serde_json::Value),
}

/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method
/// [`organization_sponsorships_admin_initiated_revoke_sponsorship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipsAdminInitiatedRevokeSponsorshipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_sponsorships_create_sponsorship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipsCreateSponsorshipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_sponsorships_get_sponsored_organizations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipsGetSponsoredOrganizationsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_sponsorships_get_sync_status`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipsGetSyncStatusError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_sponsorships_post_remove_sponsorship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipsPostRemoveSponsorshipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_sponsorships_post_revoke_sponsorship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipsPostRevokeSponsorshipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_sponsorships_pre_validate_sponsorship_token`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipsPreValidateSponsorshipTokenError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_sponsorships_redeem_sponsorship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipsRedeemSponsorshipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_sponsorships_remove_sponsorship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipsRemoveSponsorshipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_sponsorships_resend_sponsorship_offer`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipsResendSponsorshipOfferError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_sponsorships_revoke_sponsorship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipsRevokeSponsorshipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_sponsorships_sync`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationSponsorshipsSyncError {
    UnknownValue(serde_json::Value),
}

pub async fn organization_sponsorships_admin_initiated_revoke_sponsorship(
    configuration: &configuration::Configuration,
    sponsoring_org_id: uuid::Uuid,
    sponsored_friendly_name: &str,
) -> Result<(), Error<OrganizationSponsorshipsAdminInitiatedRevokeSponsorshipError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsoring_org_id = sponsoring_org_id;
    let p_sponsored_friendly_name = sponsored_friendly_name;

    let uri_str = format!(
        "{}/organization/sponsorship/{sponsoringOrgId}/{sponsoredFriendlyName}/revoke",
        configuration.base_path,
        sponsoringOrgId = crate::apis::urlencode(p_sponsoring_org_id.to_string()),
        sponsoredFriendlyName = crate::apis::urlencode(p_sponsored_friendly_name)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipsAdminInitiatedRevokeSponsorshipError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorships_create_sponsorship(
    configuration: &configuration::Configuration,
    sponsoring_org_id: uuid::Uuid,
    organization_sponsorship_create_request_model: Option<
        models::OrganizationSponsorshipCreateRequestModel,
    >,
) -> Result<(), Error<OrganizationSponsorshipsCreateSponsorshipError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsoring_org_id = sponsoring_org_id;
    let p_organization_sponsorship_create_request_model =
        organization_sponsorship_create_request_model;

    let uri_str = format!(
        "{}/organization/sponsorship/{sponsoringOrgId}/families-for-enterprise",
        configuration.base_path,
        sponsoringOrgId = crate::apis::urlencode(p_sponsoring_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_sponsorship_create_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipsCreateSponsorshipError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorships_get_sponsored_organizations(
    configuration: &configuration::Configuration,
    sponsoring_org_id: uuid::Uuid,
) -> Result<
    models::OrganizationSponsorshipInvitesResponseModelListResponseModel,
    Error<OrganizationSponsorshipsGetSponsoredOrganizationsError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsoring_org_id = sponsoring_org_id;

    let uri_str = format!(
        "{}/organization/sponsorship/{sponsoringOrgId}/sponsored",
        configuration.base_path,
        sponsoringOrgId = crate::apis::urlencode(p_sponsoring_org_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationSponsorshipInvitesResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationSponsorshipInvitesResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipsGetSponsoredOrganizationsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorships_get_sync_status(
    configuration: &configuration::Configuration,
    sponsoring_org_id: uuid::Uuid,
) -> Result<(), Error<OrganizationSponsorshipsGetSyncStatusError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsoring_org_id = sponsoring_org_id;

    let uri_str = format!(
        "{}/organization/sponsorship/{sponsoringOrgId}/sync-status",
        configuration.base_path,
        sponsoringOrgId = crate::apis::urlencode(p_sponsoring_org_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipsGetSyncStatusError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorships_post_remove_sponsorship(
    configuration: &configuration::Configuration,
    sponsored_org_id: uuid::Uuid,
) -> Result<(), Error<OrganizationSponsorshipsPostRemoveSponsorshipError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsored_org_id = sponsored_org_id;

    let uri_str = format!(
        "{}/organization/sponsorship/sponsored/{sponsoredOrgId}/remove",
        configuration.base_path,
        sponsoredOrgId = crate::apis::urlencode(p_sponsored_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipsPostRemoveSponsorshipError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorships_post_revoke_sponsorship(
    configuration: &configuration::Configuration,
    sponsoring_organization_id: uuid::Uuid,
) -> Result<(), Error<OrganizationSponsorshipsPostRevokeSponsorshipError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsoring_organization_id = sponsoring_organization_id;

    let uri_str = format!(
        "{}/organization/sponsorship/{sponsoringOrganizationId}/delete",
        configuration.base_path,
        sponsoringOrganizationId = crate::apis::urlencode(p_sponsoring_organization_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipsPostRevokeSponsorshipError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorships_pre_validate_sponsorship_token(
    configuration: &configuration::Configuration,
    sponsorship_token: Option<&str>,
) -> Result<
    models::PreValidateSponsorshipResponseModel,
    Error<OrganizationSponsorshipsPreValidateSponsorshipTokenError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsorship_token = sponsorship_token;

    let uri_str = format!(
        "{}/organization/sponsorship/validate-token",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_sponsorship_token {
        req_builder = req_builder.query(&[("sponsorshipToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PreValidateSponsorshipResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PreValidateSponsorshipResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipsPreValidateSponsorshipTokenError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorships_redeem_sponsorship(
    configuration: &configuration::Configuration,
    sponsorship_token: Option<&str>,
    organization_sponsorship_redeem_request_model: Option<
        models::OrganizationSponsorshipRedeemRequestModel,
    >,
) -> Result<(), Error<OrganizationSponsorshipsRedeemSponsorshipError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsorship_token = sponsorship_token;
    let p_organization_sponsorship_redeem_request_model =
        organization_sponsorship_redeem_request_model;

    let uri_str = format!(
        "{}/organization/sponsorship/redeem",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_sponsorship_token {
        req_builder = req_builder.query(&[("sponsorshipToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_sponsorship_redeem_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipsRedeemSponsorshipError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorships_remove_sponsorship(
    configuration: &configuration::Configuration,
    sponsored_org_id: uuid::Uuid,
) -> Result<(), Error<OrganizationSponsorshipsRemoveSponsorshipError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsored_org_id = sponsored_org_id;

    let uri_str = format!(
        "{}/organization/sponsorship/sponsored/{sponsoredOrgId}",
        configuration.base_path,
        sponsoredOrgId = crate::apis::urlencode(p_sponsored_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipsRemoveSponsorshipError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorships_resend_sponsorship_offer(
    configuration: &configuration::Configuration,
    sponsoring_org_id: uuid::Uuid,
    sponsored_friendly_name: Option<&str>,
) -> Result<(), Error<OrganizationSponsorshipsResendSponsorshipOfferError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsoring_org_id = sponsoring_org_id;
    let p_sponsored_friendly_name = sponsored_friendly_name;

    let uri_str = format!(
        "{}/organization/sponsorship/{sponsoringOrgId}/families-for-enterprise/resend",
        configuration.base_path,
        sponsoringOrgId = crate::apis::urlencode(p_sponsoring_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref param_value) = p_sponsored_friendly_name {
        req_builder = req_builder.query(&[("sponsoredFriendlyName", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipsResendSponsorshipOfferError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorships_revoke_sponsorship(
    configuration: &configuration::Configuration,
    sponsoring_organization_id: uuid::Uuid,
) -> Result<(), Error<OrganizationSponsorshipsRevokeSponsorshipError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_sponsoring_organization_id = sponsoring_organization_id;

    let uri_str = format!(
        "{}/organization/sponsorship/{sponsoringOrganizationId}",
        configuration.base_path,
        sponsoringOrganizationId = crate::apis::urlencode(p_sponsoring_organization_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipsRevokeSponsorshipError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_sponsorships_sync(
    configuration: &configuration::Configuration,
    organization_sponsorship_sync_request_model: Option<
        models::OrganizationSponsorshipSyncRequestModel,
    >,
) -> Result<
    models::OrganizationSponsorshipSyncResponseModel,
    Error<OrganizationSponsorshipsSyncError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_sponsorship_sync_request_model = organization_sponsorship_sync_request_model;

    let uri_str = format!("{}/organization/sponsorship/sync", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_sponsorship_sync_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationSponsorshipSyncResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationSponsorshipSyncResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationSponsorshipsSyncError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;

use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};

use super::{Error, configuration};
use crate::{
    apis::{ContentType, ResponseContent},
    models,
};

#[cfg_attr(feature = "mockall", automock)]
#[async_trait(?Send)]
pub trait OrganizationReportsApi: Send + Sync {
    /// POST /reports/organizations/{organizationId}
    async fn create_organization_report<'a>(
        &self,
        organization_id: uuid::Uuid,
        add_organization_report_request: Option<models::AddOrganizationReportRequest>,
    ) -> Result<(), Error<CreateOrganizationReportError>>;

    /// GET /reports/organizations/{organizationId}/latest
    async fn get_latest_organization_report<'a>(
        &self,
        organization_id: uuid::Uuid,
    ) -> Result<(), Error<GetLatestOrganizationReportError>>;

    /// GET /reports/organizations/{organizationId}/{reportId}
    async fn get_organization_report<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
    ) -> Result<(), Error<GetOrganizationReportError>>;

    /// GET /reports/organizations/{organizationId}/data/application/{reportId}
    async fn get_organization_report_application_data<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
    ) -> Result<(), Error<GetOrganizationReportApplicationDataError>>;

    /// GET /reports/organizations/{organizationId}/data/report/{reportId}
    async fn get_organization_report_data<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
    ) -> Result<(), Error<GetOrganizationReportDataError>>;

    /// GET /reports/organizations/{organizationId}/data/summary/{reportId}
    async fn get_organization_report_summary<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
    ) -> Result<(), Error<GetOrganizationReportSummaryError>>;

    /// GET /reports/organizations/{organizationId}/data/summary
    async fn get_organization_report_summary_data_by_date_range<'a>(
        &self,
        organization_id: uuid::Uuid,
        start_date: Option<String>,
        end_date: Option<String>,
    ) -> Result<(), Error<GetOrganizationReportSummaryDataByDateRangeError>>;

    /// PATCH /reports/organizations/{organizationId}/{reportId}
    async fn update_organization_report<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: &'a str,
        update_organization_report_request: Option<models::UpdateOrganizationReportRequest>,
    ) -> Result<(), Error<UpdateOrganizationReportError>>;

    /// PATCH /reports/organizations/{organizationId}/data/application/{reportId}
    async fn update_organization_report_application_data<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
        update_organization_report_application_data_request: Option<
            models::UpdateOrganizationReportApplicationDataRequest,
        >,
    ) -> Result<(), Error<UpdateOrganizationReportApplicationDataError>>;

    /// PATCH /reports/organizations/{organizationId}/data/report/{reportId}
    async fn update_organization_report_data<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
        update_organization_report_data_request: Option<
            models::UpdateOrganizationReportDataRequest,
        >,
    ) -> Result<(), Error<UpdateOrganizationReportDataError>>;

    /// PATCH /reports/organizations/{organizationId}/data/summary/{reportId}
    async fn update_organization_report_summary<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
        update_organization_report_summary_request: Option<
            models::UpdateOrganizationReportSummaryRequest,
        >,
    ) -> Result<(), Error<UpdateOrganizationReportSummaryError>>;
}

pub struct OrganizationReportsApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl OrganizationReportsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

#[async_trait(?Send)]
impl OrganizationReportsApi for OrganizationReportsApiClient {
    async fn create_organization_report<'a>(
        &self,
        organization_id: uuid::Uuid,
        add_organization_report_request: Option<models::AddOrganizationReportRequest>,
    ) -> Result<(), Error<CreateOrganizationReportError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/reports/organizations/{organizationId}",
            local_var_configuration.base_path,
            organizationId = organization_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&add_organization_report_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<CreateOrganizationReportError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_latest_organization_report<'a>(
        &self,
        organization_id: uuid::Uuid,
    ) -> Result<(), Error<GetLatestOrganizationReportError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/reports/organizations/{organizationId}/latest",
            local_var_configuration.base_path,
            organizationId = organization_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<GetLatestOrganizationReportError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_organization_report<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
    ) -> Result<(), Error<GetOrganizationReportError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/reports/organizations/{organizationId}/{reportId}",
            local_var_configuration.base_path,
            organizationId = organization_id,
            reportId = report_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<GetOrganizationReportError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_organization_report_application_data<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
    ) -> Result<(), Error<GetOrganizationReportApplicationDataError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/reports/organizations/{organizationId}/data/application/{reportId}",
            local_var_configuration.base_path,
            organizationId = organization_id,
            reportId = report_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<GetOrganizationReportApplicationDataError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_organization_report_data<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
    ) -> Result<(), Error<GetOrganizationReportDataError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/reports/organizations/{organizationId}/data/report/{reportId}",
            local_var_configuration.base_path,
            organizationId = organization_id,
            reportId = report_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<GetOrganizationReportDataError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_organization_report_summary<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
    ) -> Result<(), Error<GetOrganizationReportSummaryError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/reports/organizations/{organizationId}/data/summary/{reportId}",
            local_var_configuration.base_path,
            organizationId = organization_id,
            reportId = report_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<GetOrganizationReportSummaryError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_organization_report_summary_data_by_date_range<'a>(
        &self,
        organization_id: uuid::Uuid,
        start_date: Option<String>,
        end_date: Option<String>,
    ) -> Result<(), Error<GetOrganizationReportSummaryDataByDateRangeError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/reports/organizations/{organizationId}/data/summary",
            local_var_configuration.base_path,
            organizationId = organization_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref param_value) = start_date {
            local_var_req_builder =
                local_var_req_builder.query(&[("startDate", &param_value.to_string())]);
        }
        if let Some(ref param_value) = end_date {
            local_var_req_builder =
                local_var_req_builder.query(&[("endDate", &param_value.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<GetOrganizationReportSummaryDataByDateRangeError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn update_organization_report<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: &'a str,
        update_organization_report_request: Option<models::UpdateOrganizationReportRequest>,
    ) -> Result<(), Error<UpdateOrganizationReportError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/reports/organizations/{organizationId}/{reportId}",
            local_var_configuration.base_path,
            organizationId = organization_id,
            reportId = crate::apis::urlencode(report_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&update_organization_report_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<UpdateOrganizationReportError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn update_organization_report_application_data<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
        update_organization_report_application_data_request: Option<
            models::UpdateOrganizationReportApplicationDataRequest,
        >,
    ) -> Result<(), Error<UpdateOrganizationReportApplicationDataError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/reports/organizations/{organizationId}/data/application/{reportId}",
            local_var_configuration.base_path,
            organizationId = organization_id,
            reportId = report_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder =
            local_var_req_builder.json(&update_organization_report_application_data_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<UpdateOrganizationReportApplicationDataError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn update_organization_report_data<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
        update_organization_report_data_request: Option<
            models::UpdateOrganizationReportDataRequest,
        >,
    ) -> Result<(), Error<UpdateOrganizationReportDataError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/reports/organizations/{organizationId}/data/report/{reportId}",
            local_var_configuration.base_path,
            organizationId = organization_id,
            reportId = report_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder =
            local_var_req_builder.json(&update_organization_report_data_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<UpdateOrganizationReportDataError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn update_organization_report_summary<'a>(
        &self,
        organization_id: uuid::Uuid,
        report_id: uuid::Uuid,
        update_organization_report_summary_request: Option<
            models::UpdateOrganizationReportSummaryRequest,
        >,
    ) -> Result<(), Error<UpdateOrganizationReportSummaryError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/reports/organizations/{organizationId}/data/summary/{reportId}",
            local_var_configuration.base_path,
            organizationId = organization_id,
            reportId = report_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder =
            local_var_req_builder.json(&update_organization_report_summary_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<UpdateOrganizationReportSummaryError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`OrganizationReportsApi::create_organization_report`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateOrganizationReportError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`OrganizationReportsApi::get_latest_organization_report`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLatestOrganizationReportError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`OrganizationReportsApi::get_organization_report`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationReportError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method
/// [`OrganizationReportsApi::get_organization_report_application_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationReportApplicationDataError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`OrganizationReportsApi::get_organization_report_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationReportDataError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`OrganizationReportsApi::get_organization_report_summary`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationReportSummaryError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method
/// [`OrganizationReportsApi::get_organization_report_summary_data_by_date_range`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationReportSummaryDataByDateRangeError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`OrganizationReportsApi::update_organization_report`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateOrganizationReportError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method
/// [`OrganizationReportsApi::update_organization_report_application_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateOrganizationReportApplicationDataError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`OrganizationReportsApi::update_organization_report_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateOrganizationReportDataError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`OrganizationReportsApi::update_organization_report_summary`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateOrganizationReportSummaryError {
    UnknownValue(serde_json::Value),
}

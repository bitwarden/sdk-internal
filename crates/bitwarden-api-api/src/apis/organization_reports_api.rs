/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method
/// [`reports_organizations_organization_id_data_application_report_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportsOrganizationsOrganizationIdDataApplicationReportIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method
/// [`reports_organizations_organization_id_data_application_report_id_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportsOrganizationsOrganizationIdDataApplicationReportIdPatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method
/// [`reports_organizations_organization_id_data_report_report_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportsOrganizationsOrganizationIdDataReportReportIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method
/// [`reports_organizations_organization_id_data_report_report_id_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportsOrganizationsOrganizationIdDataReportReportIdPatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`reports_organizations_organization_id_data_summary_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportsOrganizationsOrganizationIdDataSummaryGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method
/// [`reports_organizations_organization_id_data_summary_report_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportsOrganizationsOrganizationIdDataSummaryReportIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method
/// [`reports_organizations_organization_id_data_summary_report_id_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportsOrganizationsOrganizationIdDataSummaryReportIdPatchError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`reports_organizations_organization_id_latest_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportsOrganizationsOrganizationIdLatestGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`reports_organizations_organization_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportsOrganizationsOrganizationIdPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`reports_organizations_organization_id_report_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportsOrganizationsOrganizationIdReportIdGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`reports_organizations_organization_id_report_id_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReportsOrganizationsOrganizationIdReportIdPatchError {
    UnknownValue(serde_json::Value),
}

///  This operation is defined on: [`https://github.com/bitwarden/server/blob/7eb5035d94ed67927d3f638ebd34d89003507441/src/Api/Dirt/Controllers/OrganizationReportsController.cs#L240`]
pub async fn reports_organizations_organization_id_data_application_report_id_get(
    configuration: &configuration::Configuration,
    organization_id: uuid::Uuid,
    report_id: uuid::Uuid,
) -> Result<(), Error<ReportsOrganizationsOrganizationIdDataApplicationReportIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_report_id = report_id;

    let uri_str = format!(
        "{}/reports/organizations/{organizationId}/data/application/{reportId}",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id.to_string()),
        reportId = crate::apis::urlencode(p_report_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ReportsOrganizationsOrganizationIdDataApplicationReportIdGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///  This operation is defined on: [`https://github.com/bitwarden/server/blob/7eb5035d94ed67927d3f638ebd34d89003507441/src/Api/Dirt/Controllers/OrganizationReportsController.cs#L265`]
pub async fn reports_organizations_organization_id_data_application_report_id_patch(
    configuration: &configuration::Configuration,
    organization_id: uuid::Uuid,
    report_id: uuid::Uuid,
    update_organization_report_application_data_request: Option<
        models::UpdateOrganizationReportApplicationDataRequest,
    >,
) -> Result<(), Error<ReportsOrganizationsOrganizationIdDataApplicationReportIdPatchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_report_id = report_id;
    let p_update_organization_report_application_data_request =
        update_organization_report_application_data_request;

    let uri_str = format!(
        "{}/reports/organizations/{organizationId}/data/application/{reportId}",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id.to_string()),
        reportId = crate::apis::urlencode(p_report_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_update_organization_report_application_data_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ReportsOrganizationsOrganizationIdDataApplicationReportIdPatchError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///  This operation is defined on: [`https://github.com/bitwarden/server/blob/7eb5035d94ed67927d3f638ebd34d89003507441/src/Api/Dirt/Controllers/OrganizationReportsController.cs#L196`]
pub async fn reports_organizations_organization_id_data_report_report_id_get(
    configuration: &configuration::Configuration,
    organization_id: uuid::Uuid,
    report_id: uuid::Uuid,
) -> Result<(), Error<ReportsOrganizationsOrganizationIdDataReportReportIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_report_id = report_id;

    let uri_str = format!(
        "{}/reports/organizations/{organizationId}/data/report/{reportId}",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id.to_string()),
        reportId = crate::apis::urlencode(p_report_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ReportsOrganizationsOrganizationIdDataReportReportIdGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///  This operation is defined on: [`https://github.com/bitwarden/server/blob/7eb5035d94ed67927d3f638ebd34d89003507441/src/Api/Dirt/Controllers/OrganizationReportsController.cs#L214`]
pub async fn reports_organizations_organization_id_data_report_report_id_patch(
    configuration: &configuration::Configuration,
    organization_id: uuid::Uuid,
    report_id: uuid::Uuid,
    update_organization_report_data_request: Option<models::UpdateOrganizationReportDataRequest>,
) -> Result<(), Error<ReportsOrganizationsOrganizationIdDataReportReportIdPatchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_report_id = report_id;
    let p_update_organization_report_data_request = update_organization_report_data_request;

    let uri_str = format!(
        "{}/reports/organizations/{organizationId}/data/report/{reportId}",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id.to_string()),
        reportId = crate::apis::urlencode(p_report_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_update_organization_report_data_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ReportsOrganizationsOrganizationIdDataReportReportIdPatchError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///  This operation is defined on: [`https://github.com/bitwarden/server/blob/7eb5035d94ed67927d3f638ebd34d89003507441/src/Api/Dirt/Controllers/OrganizationReportsController.cs#L132`]
pub async fn reports_organizations_organization_id_data_summary_get(
    configuration: &configuration::Configuration,
    organization_id: uuid::Uuid,
    start_date: Option<String>,
    end_date: Option<String>,
) -> Result<(), Error<ReportsOrganizationsOrganizationIdDataSummaryGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_start_date = start_date;
    let p_end_date = end_date;

    let uri_str = format!(
        "{}/reports/organizations/{organizationId}/data/summary",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_start_date {
        req_builder = req_builder.query(&[("startDate", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_end_date {
        req_builder = req_builder.query(&[("endDate", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ReportsOrganizationsOrganizationIdDataSummaryGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///  This operation is defined on: [`https://github.com/bitwarden/server/blob/7eb5035d94ed67927d3f638ebd34d89003507441/src/Api/Dirt/Controllers/OrganizationReportsController.cs#L151`]
pub async fn reports_organizations_organization_id_data_summary_report_id_get(
    configuration: &configuration::Configuration,
    organization_id: uuid::Uuid,
    report_id: uuid::Uuid,
) -> Result<(), Error<ReportsOrganizationsOrganizationIdDataSummaryReportIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_report_id = report_id;

    let uri_str = format!(
        "{}/reports/organizations/{organizationId}/data/summary/{reportId}",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id.to_string()),
        reportId = crate::apis::urlencode(p_report_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ReportsOrganizationsOrganizationIdDataSummaryReportIdGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///  This operation is defined on: [`https://github.com/bitwarden/server/blob/7eb5035d94ed67927d3f638ebd34d89003507441/src/Api/Dirt/Controllers/OrganizationReportsController.cs#L170`]
pub async fn reports_organizations_organization_id_data_summary_report_id_patch(
    configuration: &configuration::Configuration,
    organization_id: uuid::Uuid,
    report_id: uuid::Uuid,
    update_organization_report_summary_request: Option<
        models::UpdateOrganizationReportSummaryRequest,
    >,
) -> Result<(), Error<ReportsOrganizationsOrganizationIdDataSummaryReportIdPatchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_report_id = report_id;
    let p_update_organization_report_summary_request = update_organization_report_summary_request;

    let uri_str = format!(
        "{}/reports/organizations/{organizationId}/data/summary/{reportId}",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id.to_string()),
        reportId = crate::apis::urlencode(p_report_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_update_organization_report_summary_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ReportsOrganizationsOrganizationIdDataSummaryReportIdPatchError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///  This operation is defined on: [`https://github.com/bitwarden/server/blob/7eb5035d94ed67927d3f638ebd34d89003507441/src/Api/Dirt/Controllers/OrganizationReportsController.cs#L57`]
pub async fn reports_organizations_organization_id_latest_get(
    configuration: &configuration::Configuration,
    organization_id: uuid::Uuid,
) -> Result<(), Error<ReportsOrganizationsOrganizationIdLatestGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;

    let uri_str = format!(
        "{}/reports/organizations/{organizationId}/latest",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ReportsOrganizationsOrganizationIdLatestGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///  This operation is defined on: [`https://github.com/bitwarden/server/blob/7eb5035d94ed67927d3f638ebd34d89003507441/src/Api/Dirt/Controllers/OrganizationReportsController.cs#L93`]
pub async fn reports_organizations_organization_id_post(
    configuration: &configuration::Configuration,
    organization_id: uuid::Uuid,
    add_organization_report_request: Option<models::AddOrganizationReportRequest>,
) -> Result<(), Error<ReportsOrganizationsOrganizationIdPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_add_organization_report_request = add_organization_report_request;

    let uri_str = format!(
        "{}/reports/organizations/{organizationId}",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_add_organization_report_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ReportsOrganizationsOrganizationIdPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///  This operation is defined on: [`https://github.com/bitwarden/server/blob/7eb5035d94ed67927d3f638ebd34d89003507441/src/Api/Dirt/Controllers/OrganizationReportsController.cs#L70`]
pub async fn reports_organizations_organization_id_report_id_get(
    configuration: &configuration::Configuration,
    organization_id: uuid::Uuid,
    report_id: uuid::Uuid,
) -> Result<(), Error<ReportsOrganizationsOrganizationIdReportIdGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_report_id = report_id;

    let uri_str = format!(
        "{}/reports/organizations/{organizationId}/{reportId}",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id.to_string()),
        reportId = crate::apis::urlencode(p_report_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ReportsOrganizationsOrganizationIdReportIdGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

///  This operation is defined on: [`https://github.com/bitwarden/server/blob/7eb5035d94ed67927d3f638ebd34d89003507441/src/Api/Dirt/Controllers/OrganizationReportsController.cs#L110`]
pub async fn reports_organizations_organization_id_report_id_patch(
    configuration: &configuration::Configuration,
    organization_id: uuid::Uuid,
    report_id: &str,
    update_organization_report_request: Option<models::UpdateOrganizationReportRequest>,
) -> Result<(), Error<ReportsOrganizationsOrganizationIdReportIdPatchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_organization_id = organization_id;
    let p_report_id = report_id;
    let p_update_organization_report_request = update_organization_report_request;

    let uri_str = format!(
        "{}/reports/organizations/{organizationId}/{reportId}",
        configuration.base_path,
        organizationId = crate::apis::urlencode(p_organization_id.to_string()),
        reportId = crate::apis::urlencode(p_report_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_update_organization_report_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ReportsOrganizationsOrganizationIdReportIdPatchError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;

use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};

use super::{Error, configuration};
use crate::{
    apis::{ContentType, ResponseContent},
    models,
};

#[cfg_attr(feature = "mockall", automock)]
#[cfg_attr(target_arch = "wasm32", async_trait(?Send))]
#[cfg_attr(not(target_arch = "wasm32"), async_trait)]
pub trait TaxApi: Send + Sync {
    /// POST /billing/tax/organizations/{organizationId}/subscription/plan-change
    async fn preview_organization_subscription_plan_change_tax<'a>(
        &self,
        organization_id: &'a str,
        id: Option<uuid::Uuid>,
        identifier: Option<&'a str>,
        name: Option<&'a str>,
        business_name: Option<&'a str>,
        business_address1: Option<&'a str>,
        business_address2: Option<&'a str>,
        business_address3: Option<&'a str>,
        business_country: Option<&'a str>,
        business_tax_number: Option<&'a str>,
        billing_email: Option<&'a str>,
        plan: Option<&'a str>,
        plan_type: Option<models::PlanType>,
        seats: Option<i32>,
        max_collections: Option<i32>,
        use_policies: Option<bool>,
        use_sso: Option<bool>,
        use_key_connector: Option<bool>,
        use_scim: Option<bool>,
        use_groups: Option<bool>,
        use_directory: Option<bool>,
        use_events: Option<bool>,
        use_totp: Option<bool>,
        use2fa: Option<bool>,
        use_api: Option<bool>,
        use_reset_password: Option<bool>,
        use_secrets_manager: Option<bool>,
        self_host: Option<bool>,
        users_get_premium: Option<bool>,
        use_custom_permissions: Option<bool>,
        storage: Option<i64>,
        max_storage_gb: Option<i32>,
        gateway: Option<models::GatewayType>,
        gateway_customer_id: Option<&'a str>,
        gateway_subscription_id: Option<&'a str>,
        reference_data: Option<&'a str>,
        enabled: Option<bool>,
        license_key: Option<&'a str>,
        public_key: Option<&'a str>,
        private_key: Option<&'a str>,
        two_factor_providers: Option<&'a str>,
        expiration_date: Option<String>,
        creation_date: Option<String>,
        revision_date: Option<String>,
        max_autoscale_seats: Option<i32>,
        owners_notified_of_autoscaling: Option<String>,
        status: Option<models::OrganizationStatusType>,
        use_password_manager: Option<bool>,
        sm_seats: Option<i32>,
        sm_service_accounts: Option<i32>,
        max_autoscale_sm_seats: Option<i32>,
        max_autoscale_sm_service_accounts: Option<i32>,
        limit_collection_creation: Option<bool>,
        limit_collection_deletion: Option<bool>,
        allow_admin_access_to_all_collection_items: Option<bool>,
        limit_item_deletion: Option<bool>,
        use_risk_insights: Option<bool>,
        use_organization_domains: Option<bool>,
        use_admin_sponsored_families: Option<bool>,
        sync_seats: Option<bool>,
        preview_organization_subscription_plan_change_tax_request: Option<
            models::PreviewOrganizationSubscriptionPlanChangeTaxRequest,
        >,
    ) -> Result<(), Error<PreviewOrganizationSubscriptionPlanChangeTaxError>>;

    /// POST /billing/tax/organizations/subscriptions/purchase
    async fn preview_organization_subscription_purchase_tax<'a>(
        &self,
        preview_organization_subscription_purchase_tax_request: Option<
            models::PreviewOrganizationSubscriptionPurchaseTaxRequest,
        >,
    ) -> Result<(), Error<PreviewOrganizationSubscriptionPurchaseTaxError>>;

    /// PUT /billing/tax/organizations/{organizationId}/subscription/update
    async fn preview_organization_subscription_update_tax<'a>(
        &self,
        organization_id: &'a str,
        id: Option<uuid::Uuid>,
        identifier: Option<&'a str>,
        name: Option<&'a str>,
        business_name: Option<&'a str>,
        business_address1: Option<&'a str>,
        business_address2: Option<&'a str>,
        business_address3: Option<&'a str>,
        business_country: Option<&'a str>,
        business_tax_number: Option<&'a str>,
        billing_email: Option<&'a str>,
        plan: Option<&'a str>,
        plan_type: Option<models::PlanType>,
        seats: Option<i32>,
        max_collections: Option<i32>,
        use_policies: Option<bool>,
        use_sso: Option<bool>,
        use_key_connector: Option<bool>,
        use_scim: Option<bool>,
        use_groups: Option<bool>,
        use_directory: Option<bool>,
        use_events: Option<bool>,
        use_totp: Option<bool>,
        use2fa: Option<bool>,
        use_api: Option<bool>,
        use_reset_password: Option<bool>,
        use_secrets_manager: Option<bool>,
        self_host: Option<bool>,
        users_get_premium: Option<bool>,
        use_custom_permissions: Option<bool>,
        storage: Option<i64>,
        max_storage_gb: Option<i32>,
        gateway: Option<models::GatewayType>,
        gateway_customer_id: Option<&'a str>,
        gateway_subscription_id: Option<&'a str>,
        reference_data: Option<&'a str>,
        enabled: Option<bool>,
        license_key: Option<&'a str>,
        public_key: Option<&'a str>,
        private_key: Option<&'a str>,
        two_factor_providers: Option<&'a str>,
        expiration_date: Option<String>,
        creation_date: Option<String>,
        revision_date: Option<String>,
        max_autoscale_seats: Option<i32>,
        owners_notified_of_autoscaling: Option<String>,
        status: Option<models::OrganizationStatusType>,
        use_password_manager: Option<bool>,
        sm_seats: Option<i32>,
        sm_service_accounts: Option<i32>,
        max_autoscale_sm_seats: Option<i32>,
        max_autoscale_sm_service_accounts: Option<i32>,
        limit_collection_creation: Option<bool>,
        limit_collection_deletion: Option<bool>,
        allow_admin_access_to_all_collection_items: Option<bool>,
        limit_item_deletion: Option<bool>,
        use_risk_insights: Option<bool>,
        use_organization_domains: Option<bool>,
        use_admin_sponsored_families: Option<bool>,
        sync_seats: Option<bool>,
        preview_organization_subscription_update_tax_request: Option<
            models::PreviewOrganizationSubscriptionUpdateTaxRequest,
        >,
    ) -> Result<(), Error<PreviewOrganizationSubscriptionUpdateTaxError>>;

    /// POST /billing/tax/premium/subscriptions/purchase
    async fn preview_premium_subscription_purchase_tax<'a>(
        &self,
        preview_premium_subscription_purchase_tax_request: Option<
            models::PreviewPremiumSubscriptionPurchaseTaxRequest,
        >,
    ) -> Result<(), Error<PreviewPremiumSubscriptionPurchaseTaxError>>;
}

pub struct TaxApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl TaxApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

#[cfg_attr(target_arch = "wasm32", async_trait(?Send))]
#[cfg_attr(not(target_arch = "wasm32"), async_trait)]
impl TaxApi for TaxApiClient {
    async fn preview_organization_subscription_plan_change_tax<'a>(
        &self,
        organization_id: &'a str,
        id: Option<uuid::Uuid>,
        identifier: Option<&'a str>,
        name: Option<&'a str>,
        business_name: Option<&'a str>,
        business_address1: Option<&'a str>,
        business_address2: Option<&'a str>,
        business_address3: Option<&'a str>,
        business_country: Option<&'a str>,
        business_tax_number: Option<&'a str>,
        billing_email: Option<&'a str>,
        plan: Option<&'a str>,
        plan_type: Option<models::PlanType>,
        seats: Option<i32>,
        max_collections: Option<i32>,
        use_policies: Option<bool>,
        use_sso: Option<bool>,
        use_key_connector: Option<bool>,
        use_scim: Option<bool>,
        use_groups: Option<bool>,
        use_directory: Option<bool>,
        use_events: Option<bool>,
        use_totp: Option<bool>,
        use2fa: Option<bool>,
        use_api: Option<bool>,
        use_reset_password: Option<bool>,
        use_secrets_manager: Option<bool>,
        self_host: Option<bool>,
        users_get_premium: Option<bool>,
        use_custom_permissions: Option<bool>,
        storage: Option<i64>,
        max_storage_gb: Option<i32>,
        gateway: Option<models::GatewayType>,
        gateway_customer_id: Option<&'a str>,
        gateway_subscription_id: Option<&'a str>,
        reference_data: Option<&'a str>,
        enabled: Option<bool>,
        license_key: Option<&'a str>,
        public_key: Option<&'a str>,
        private_key: Option<&'a str>,
        two_factor_providers: Option<&'a str>,
        expiration_date: Option<String>,
        creation_date: Option<String>,
        revision_date: Option<String>,
        max_autoscale_seats: Option<i32>,
        owners_notified_of_autoscaling: Option<String>,
        status: Option<models::OrganizationStatusType>,
        use_password_manager: Option<bool>,
        sm_seats: Option<i32>,
        sm_service_accounts: Option<i32>,
        max_autoscale_sm_seats: Option<i32>,
        max_autoscale_sm_service_accounts: Option<i32>,
        limit_collection_creation: Option<bool>,
        limit_collection_deletion: Option<bool>,
        allow_admin_access_to_all_collection_items: Option<bool>,
        limit_item_deletion: Option<bool>,
        use_risk_insights: Option<bool>,
        use_organization_domains: Option<bool>,
        use_admin_sponsored_families: Option<bool>,
        sync_seats: Option<bool>,
        preview_organization_subscription_plan_change_tax_request: Option<
            models::PreviewOrganizationSubscriptionPlanChangeTaxRequest,
        >,
    ) -> Result<(), Error<PreviewOrganizationSubscriptionPlanChangeTaxError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/billing/tax/organizations/{organizationId}/subscription/plan-change",
            local_var_configuration.base_path,
            organizationId = crate::apis::urlencode(organization_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref param_value) = id {
            local_var_req_builder =
                local_var_req_builder.query(&[("id", &param_value.to_string())]);
        }
        if let Some(ref param_value) = identifier {
            local_var_req_builder =
                local_var_req_builder.query(&[("identifier", &param_value.to_string())]);
        }
        if let Some(ref param_value) = name {
            local_var_req_builder =
                local_var_req_builder.query(&[("name", &param_value.to_string())]);
        }
        if let Some(ref param_value) = business_name {
            local_var_req_builder =
                local_var_req_builder.query(&[("businessName", &param_value.to_string())]);
        }
        if let Some(ref param_value) = business_address1 {
            local_var_req_builder =
                local_var_req_builder.query(&[("businessAddress1", &param_value.to_string())]);
        }
        if let Some(ref param_value) = business_address2 {
            local_var_req_builder =
                local_var_req_builder.query(&[("businessAddress2", &param_value.to_string())]);
        }
        if let Some(ref param_value) = business_address3 {
            local_var_req_builder =
                local_var_req_builder.query(&[("businessAddress3", &param_value.to_string())]);
        }
        if let Some(ref param_value) = business_country {
            local_var_req_builder =
                local_var_req_builder.query(&[("businessCountry", &param_value.to_string())]);
        }
        if let Some(ref param_value) = business_tax_number {
            local_var_req_builder =
                local_var_req_builder.query(&[("businessTaxNumber", &param_value.to_string())]);
        }
        if let Some(ref param_value) = billing_email {
            local_var_req_builder =
                local_var_req_builder.query(&[("billingEmail", &param_value.to_string())]);
        }
        if let Some(ref param_value) = plan {
            local_var_req_builder =
                local_var_req_builder.query(&[("plan", &param_value.to_string())]);
        }
        if let Some(ref param_value) = plan_type {
            local_var_req_builder =
                local_var_req_builder.query(&[("planType", &param_value.to_string())]);
        }
        if let Some(ref param_value) = seats {
            local_var_req_builder =
                local_var_req_builder.query(&[("seats", &param_value.to_string())]);
        }
        if let Some(ref param_value) = max_collections {
            local_var_req_builder =
                local_var_req_builder.query(&[("maxCollections", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_policies {
            local_var_req_builder =
                local_var_req_builder.query(&[("usePolicies", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_sso {
            local_var_req_builder =
                local_var_req_builder.query(&[("useSso", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_key_connector {
            local_var_req_builder =
                local_var_req_builder.query(&[("useKeyConnector", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_scim {
            local_var_req_builder =
                local_var_req_builder.query(&[("useScim", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_groups {
            local_var_req_builder =
                local_var_req_builder.query(&[("useGroups", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_directory {
            local_var_req_builder =
                local_var_req_builder.query(&[("useDirectory", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_events {
            local_var_req_builder =
                local_var_req_builder.query(&[("useEvents", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_totp {
            local_var_req_builder =
                local_var_req_builder.query(&[("useTotp", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use2fa {
            local_var_req_builder =
                local_var_req_builder.query(&[("use2fa", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_api {
            local_var_req_builder =
                local_var_req_builder.query(&[("useApi", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_reset_password {
            local_var_req_builder =
                local_var_req_builder.query(&[("useResetPassword", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_secrets_manager {
            local_var_req_builder =
                local_var_req_builder.query(&[("useSecretsManager", &param_value.to_string())]);
        }
        if let Some(ref param_value) = self_host {
            local_var_req_builder =
                local_var_req_builder.query(&[("selfHost", &param_value.to_string())]);
        }
        if let Some(ref param_value) = users_get_premium {
            local_var_req_builder =
                local_var_req_builder.query(&[("usersGetPremium", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_custom_permissions {
            local_var_req_builder =
                local_var_req_builder.query(&[("useCustomPermissions", &param_value.to_string())]);
        }
        if let Some(ref param_value) = storage {
            local_var_req_builder =
                local_var_req_builder.query(&[("storage", &param_value.to_string())]);
        }
        if let Some(ref param_value) = max_storage_gb {
            local_var_req_builder =
                local_var_req_builder.query(&[("maxStorageGb", &param_value.to_string())]);
        }
        if let Some(ref param_value) = gateway {
            local_var_req_builder =
                local_var_req_builder.query(&[("gateway", &param_value.to_string())]);
        }
        if let Some(ref param_value) = gateway_customer_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("gatewayCustomerId", &param_value.to_string())]);
        }
        if let Some(ref param_value) = gateway_subscription_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("gatewaySubscriptionId", &param_value.to_string())]);
        }
        if let Some(ref param_value) = reference_data {
            local_var_req_builder =
                local_var_req_builder.query(&[("referenceData", &param_value.to_string())]);
        }
        if let Some(ref param_value) = enabled {
            local_var_req_builder =
                local_var_req_builder.query(&[("enabled", &param_value.to_string())]);
        }
        if let Some(ref param_value) = license_key {
            local_var_req_builder =
                local_var_req_builder.query(&[("licenseKey", &param_value.to_string())]);
        }
        if let Some(ref param_value) = public_key {
            local_var_req_builder =
                local_var_req_builder.query(&[("publicKey", &param_value.to_string())]);
        }
        if let Some(ref param_value) = private_key {
            local_var_req_builder =
                local_var_req_builder.query(&[("privateKey", &param_value.to_string())]);
        }
        if let Some(ref param_value) = two_factor_providers {
            local_var_req_builder =
                local_var_req_builder.query(&[("twoFactorProviders", &param_value.to_string())]);
        }
        if let Some(ref param_value) = expiration_date {
            local_var_req_builder =
                local_var_req_builder.query(&[("expirationDate", &param_value.to_string())]);
        }
        if let Some(ref param_value) = creation_date {
            local_var_req_builder =
                local_var_req_builder.query(&[("creationDate", &param_value.to_string())]);
        }
        if let Some(ref param_value) = revision_date {
            local_var_req_builder =
                local_var_req_builder.query(&[("revisionDate", &param_value.to_string())]);
        }
        if let Some(ref param_value) = max_autoscale_seats {
            local_var_req_builder =
                local_var_req_builder.query(&[("maxAutoscaleSeats", &param_value.to_string())]);
        }
        if let Some(ref param_value) = owners_notified_of_autoscaling {
            local_var_req_builder = local_var_req_builder
                .query(&[("ownersNotifiedOfAutoscaling", &param_value.to_string())]);
        }
        if let Some(ref param_value) = status {
            local_var_req_builder =
                local_var_req_builder.query(&[("status", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_password_manager {
            local_var_req_builder =
                local_var_req_builder.query(&[("usePasswordManager", &param_value.to_string())]);
        }
        if let Some(ref param_value) = sm_seats {
            local_var_req_builder =
                local_var_req_builder.query(&[("smSeats", &param_value.to_string())]);
        }
        if let Some(ref param_value) = sm_service_accounts {
            local_var_req_builder =
                local_var_req_builder.query(&[("smServiceAccounts", &param_value.to_string())]);
        }
        if let Some(ref param_value) = max_autoscale_sm_seats {
            local_var_req_builder =
                local_var_req_builder.query(&[("maxAutoscaleSmSeats", &param_value.to_string())]);
        }
        if let Some(ref param_value) = max_autoscale_sm_service_accounts {
            local_var_req_builder = local_var_req_builder
                .query(&[("maxAutoscaleSmServiceAccounts", &param_value.to_string())]);
        }
        if let Some(ref param_value) = limit_collection_creation {
            local_var_req_builder = local_var_req_builder
                .query(&[("limitCollectionCreation", &param_value.to_string())]);
        }
        if let Some(ref param_value) = limit_collection_deletion {
            local_var_req_builder = local_var_req_builder
                .query(&[("limitCollectionDeletion", &param_value.to_string())]);
        }
        if let Some(ref param_value) = allow_admin_access_to_all_collection_items {
            local_var_req_builder = local_var_req_builder.query(&[(
                "allowAdminAccessToAllCollectionItems",
                &param_value.to_string(),
            )]);
        }
        if let Some(ref param_value) = limit_item_deletion {
            local_var_req_builder =
                local_var_req_builder.query(&[("limitItemDeletion", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_risk_insights {
            local_var_req_builder =
                local_var_req_builder.query(&[("useRiskInsights", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_organization_domains {
            local_var_req_builder = local_var_req_builder
                .query(&[("useOrganizationDomains", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_admin_sponsored_families {
            local_var_req_builder = local_var_req_builder
                .query(&[("useAdminSponsoredFamilies", &param_value.to_string())]);
        }
        if let Some(ref param_value) = sync_seats {
            local_var_req_builder =
                local_var_req_builder.query(&[("syncSeats", &param_value.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder =
            local_var_req_builder.json(&preview_organization_subscription_plan_change_tax_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<PreviewOrganizationSubscriptionPlanChangeTaxError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn preview_organization_subscription_purchase_tax<'a>(
        &self,
        preview_organization_subscription_purchase_tax_request: Option<
            models::PreviewOrganizationSubscriptionPurchaseTaxRequest,
        >,
    ) -> Result<(), Error<PreviewOrganizationSubscriptionPurchaseTaxError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/billing/tax/organizations/subscriptions/purchase",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder =
            local_var_req_builder.json(&preview_organization_subscription_purchase_tax_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<PreviewOrganizationSubscriptionPurchaseTaxError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn preview_organization_subscription_update_tax<'a>(
        &self,
        organization_id: &'a str,
        id: Option<uuid::Uuid>,
        identifier: Option<&'a str>,
        name: Option<&'a str>,
        business_name: Option<&'a str>,
        business_address1: Option<&'a str>,
        business_address2: Option<&'a str>,
        business_address3: Option<&'a str>,
        business_country: Option<&'a str>,
        business_tax_number: Option<&'a str>,
        billing_email: Option<&'a str>,
        plan: Option<&'a str>,
        plan_type: Option<models::PlanType>,
        seats: Option<i32>,
        max_collections: Option<i32>,
        use_policies: Option<bool>,
        use_sso: Option<bool>,
        use_key_connector: Option<bool>,
        use_scim: Option<bool>,
        use_groups: Option<bool>,
        use_directory: Option<bool>,
        use_events: Option<bool>,
        use_totp: Option<bool>,
        use2fa: Option<bool>,
        use_api: Option<bool>,
        use_reset_password: Option<bool>,
        use_secrets_manager: Option<bool>,
        self_host: Option<bool>,
        users_get_premium: Option<bool>,
        use_custom_permissions: Option<bool>,
        storage: Option<i64>,
        max_storage_gb: Option<i32>,
        gateway: Option<models::GatewayType>,
        gateway_customer_id: Option<&'a str>,
        gateway_subscription_id: Option<&'a str>,
        reference_data: Option<&'a str>,
        enabled: Option<bool>,
        license_key: Option<&'a str>,
        public_key: Option<&'a str>,
        private_key: Option<&'a str>,
        two_factor_providers: Option<&'a str>,
        expiration_date: Option<String>,
        creation_date: Option<String>,
        revision_date: Option<String>,
        max_autoscale_seats: Option<i32>,
        owners_notified_of_autoscaling: Option<String>,
        status: Option<models::OrganizationStatusType>,
        use_password_manager: Option<bool>,
        sm_seats: Option<i32>,
        sm_service_accounts: Option<i32>,
        max_autoscale_sm_seats: Option<i32>,
        max_autoscale_sm_service_accounts: Option<i32>,
        limit_collection_creation: Option<bool>,
        limit_collection_deletion: Option<bool>,
        allow_admin_access_to_all_collection_items: Option<bool>,
        limit_item_deletion: Option<bool>,
        use_risk_insights: Option<bool>,
        use_organization_domains: Option<bool>,
        use_admin_sponsored_families: Option<bool>,
        sync_seats: Option<bool>,
        preview_organization_subscription_update_tax_request: Option<
            models::PreviewOrganizationSubscriptionUpdateTaxRequest,
        >,
    ) -> Result<(), Error<PreviewOrganizationSubscriptionUpdateTaxError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/billing/tax/organizations/{organizationId}/subscription/update",
            local_var_configuration.base_path,
            organizationId = crate::apis::urlencode(organization_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref param_value) = id {
            local_var_req_builder =
                local_var_req_builder.query(&[("id", &param_value.to_string())]);
        }
        if let Some(ref param_value) = identifier {
            local_var_req_builder =
                local_var_req_builder.query(&[("identifier", &param_value.to_string())]);
        }
        if let Some(ref param_value) = name {
            local_var_req_builder =
                local_var_req_builder.query(&[("name", &param_value.to_string())]);
        }
        if let Some(ref param_value) = business_name {
            local_var_req_builder =
                local_var_req_builder.query(&[("businessName", &param_value.to_string())]);
        }
        if let Some(ref param_value) = business_address1 {
            local_var_req_builder =
                local_var_req_builder.query(&[("businessAddress1", &param_value.to_string())]);
        }
        if let Some(ref param_value) = business_address2 {
            local_var_req_builder =
                local_var_req_builder.query(&[("businessAddress2", &param_value.to_string())]);
        }
        if let Some(ref param_value) = business_address3 {
            local_var_req_builder =
                local_var_req_builder.query(&[("businessAddress3", &param_value.to_string())]);
        }
        if let Some(ref param_value) = business_country {
            local_var_req_builder =
                local_var_req_builder.query(&[("businessCountry", &param_value.to_string())]);
        }
        if let Some(ref param_value) = business_tax_number {
            local_var_req_builder =
                local_var_req_builder.query(&[("businessTaxNumber", &param_value.to_string())]);
        }
        if let Some(ref param_value) = billing_email {
            local_var_req_builder =
                local_var_req_builder.query(&[("billingEmail", &param_value.to_string())]);
        }
        if let Some(ref param_value) = plan {
            local_var_req_builder =
                local_var_req_builder.query(&[("plan", &param_value.to_string())]);
        }
        if let Some(ref param_value) = plan_type {
            local_var_req_builder =
                local_var_req_builder.query(&[("planType", &param_value.to_string())]);
        }
        if let Some(ref param_value) = seats {
            local_var_req_builder =
                local_var_req_builder.query(&[("seats", &param_value.to_string())]);
        }
        if let Some(ref param_value) = max_collections {
            local_var_req_builder =
                local_var_req_builder.query(&[("maxCollections", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_policies {
            local_var_req_builder =
                local_var_req_builder.query(&[("usePolicies", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_sso {
            local_var_req_builder =
                local_var_req_builder.query(&[("useSso", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_key_connector {
            local_var_req_builder =
                local_var_req_builder.query(&[("useKeyConnector", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_scim {
            local_var_req_builder =
                local_var_req_builder.query(&[("useScim", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_groups {
            local_var_req_builder =
                local_var_req_builder.query(&[("useGroups", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_directory {
            local_var_req_builder =
                local_var_req_builder.query(&[("useDirectory", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_events {
            local_var_req_builder =
                local_var_req_builder.query(&[("useEvents", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_totp {
            local_var_req_builder =
                local_var_req_builder.query(&[("useTotp", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use2fa {
            local_var_req_builder =
                local_var_req_builder.query(&[("use2fa", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_api {
            local_var_req_builder =
                local_var_req_builder.query(&[("useApi", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_reset_password {
            local_var_req_builder =
                local_var_req_builder.query(&[("useResetPassword", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_secrets_manager {
            local_var_req_builder =
                local_var_req_builder.query(&[("useSecretsManager", &param_value.to_string())]);
        }
        if let Some(ref param_value) = self_host {
            local_var_req_builder =
                local_var_req_builder.query(&[("selfHost", &param_value.to_string())]);
        }
        if let Some(ref param_value) = users_get_premium {
            local_var_req_builder =
                local_var_req_builder.query(&[("usersGetPremium", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_custom_permissions {
            local_var_req_builder =
                local_var_req_builder.query(&[("useCustomPermissions", &param_value.to_string())]);
        }
        if let Some(ref param_value) = storage {
            local_var_req_builder =
                local_var_req_builder.query(&[("storage", &param_value.to_string())]);
        }
        if let Some(ref param_value) = max_storage_gb {
            local_var_req_builder =
                local_var_req_builder.query(&[("maxStorageGb", &param_value.to_string())]);
        }
        if let Some(ref param_value) = gateway {
            local_var_req_builder =
                local_var_req_builder.query(&[("gateway", &param_value.to_string())]);
        }
        if let Some(ref param_value) = gateway_customer_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("gatewayCustomerId", &param_value.to_string())]);
        }
        if let Some(ref param_value) = gateway_subscription_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("gatewaySubscriptionId", &param_value.to_string())]);
        }
        if let Some(ref param_value) = reference_data {
            local_var_req_builder =
                local_var_req_builder.query(&[("referenceData", &param_value.to_string())]);
        }
        if let Some(ref param_value) = enabled {
            local_var_req_builder =
                local_var_req_builder.query(&[("enabled", &param_value.to_string())]);
        }
        if let Some(ref param_value) = license_key {
            local_var_req_builder =
                local_var_req_builder.query(&[("licenseKey", &param_value.to_string())]);
        }
        if let Some(ref param_value) = public_key {
            local_var_req_builder =
                local_var_req_builder.query(&[("publicKey", &param_value.to_string())]);
        }
        if let Some(ref param_value) = private_key {
            local_var_req_builder =
                local_var_req_builder.query(&[("privateKey", &param_value.to_string())]);
        }
        if let Some(ref param_value) = two_factor_providers {
            local_var_req_builder =
                local_var_req_builder.query(&[("twoFactorProviders", &param_value.to_string())]);
        }
        if let Some(ref param_value) = expiration_date {
            local_var_req_builder =
                local_var_req_builder.query(&[("expirationDate", &param_value.to_string())]);
        }
        if let Some(ref param_value) = creation_date {
            local_var_req_builder =
                local_var_req_builder.query(&[("creationDate", &param_value.to_string())]);
        }
        if let Some(ref param_value) = revision_date {
            local_var_req_builder =
                local_var_req_builder.query(&[("revisionDate", &param_value.to_string())]);
        }
        if let Some(ref param_value) = max_autoscale_seats {
            local_var_req_builder =
                local_var_req_builder.query(&[("maxAutoscaleSeats", &param_value.to_string())]);
        }
        if let Some(ref param_value) = owners_notified_of_autoscaling {
            local_var_req_builder = local_var_req_builder
                .query(&[("ownersNotifiedOfAutoscaling", &param_value.to_string())]);
        }
        if let Some(ref param_value) = status {
            local_var_req_builder =
                local_var_req_builder.query(&[("status", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_password_manager {
            local_var_req_builder =
                local_var_req_builder.query(&[("usePasswordManager", &param_value.to_string())]);
        }
        if let Some(ref param_value) = sm_seats {
            local_var_req_builder =
                local_var_req_builder.query(&[("smSeats", &param_value.to_string())]);
        }
        if let Some(ref param_value) = sm_service_accounts {
            local_var_req_builder =
                local_var_req_builder.query(&[("smServiceAccounts", &param_value.to_string())]);
        }
        if let Some(ref param_value) = max_autoscale_sm_seats {
            local_var_req_builder =
                local_var_req_builder.query(&[("maxAutoscaleSmSeats", &param_value.to_string())]);
        }
        if let Some(ref param_value) = max_autoscale_sm_service_accounts {
            local_var_req_builder = local_var_req_builder
                .query(&[("maxAutoscaleSmServiceAccounts", &param_value.to_string())]);
        }
        if let Some(ref param_value) = limit_collection_creation {
            local_var_req_builder = local_var_req_builder
                .query(&[("limitCollectionCreation", &param_value.to_string())]);
        }
        if let Some(ref param_value) = limit_collection_deletion {
            local_var_req_builder = local_var_req_builder
                .query(&[("limitCollectionDeletion", &param_value.to_string())]);
        }
        if let Some(ref param_value) = allow_admin_access_to_all_collection_items {
            local_var_req_builder = local_var_req_builder.query(&[(
                "allowAdminAccessToAllCollectionItems",
                &param_value.to_string(),
            )]);
        }
        if let Some(ref param_value) = limit_item_deletion {
            local_var_req_builder =
                local_var_req_builder.query(&[("limitItemDeletion", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_risk_insights {
            local_var_req_builder =
                local_var_req_builder.query(&[("useRiskInsights", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_organization_domains {
            local_var_req_builder = local_var_req_builder
                .query(&[("useOrganizationDomains", &param_value.to_string())]);
        }
        if let Some(ref param_value) = use_admin_sponsored_families {
            local_var_req_builder = local_var_req_builder
                .query(&[("useAdminSponsoredFamilies", &param_value.to_string())]);
        }
        if let Some(ref param_value) = sync_seats {
            local_var_req_builder =
                local_var_req_builder.query(&[("syncSeats", &param_value.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder =
            local_var_req_builder.json(&preview_organization_subscription_update_tax_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<PreviewOrganizationSubscriptionUpdateTaxError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn preview_premium_subscription_purchase_tax<'a>(
        &self,
        preview_premium_subscription_purchase_tax_request: Option<
            models::PreviewPremiumSubscriptionPurchaseTaxRequest,
        >,
    ) -> Result<(), Error<PreviewPremiumSubscriptionPurchaseTaxError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/billing/tax/premium/subscriptions/purchase",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder =
            local_var_req_builder.json(&preview_premium_subscription_purchase_tax_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<PreviewPremiumSubscriptionPurchaseTaxError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`TaxApi::preview_organization_subscription_plan_change_tax`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PreviewOrganizationSubscriptionPlanChangeTaxError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`TaxApi::preview_organization_subscription_purchase_tax`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PreviewOrganizationSubscriptionPurchaseTaxError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`TaxApi::preview_organization_subscription_update_tax`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PreviewOrganizationSubscriptionUpdateTaxError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`TaxApi::preview_premium_subscription_purchase_tax`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PreviewPremiumSubscriptionPurchaseTaxError {
    UnknownValue(serde_json::Value),
}

/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`provider_organizations_add`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProviderOrganizationsAddError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`provider_organizations_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProviderOrganizationsDeleteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`provider_organizations_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProviderOrganizationsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`provider_organizations_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProviderOrganizationsPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`provider_organizations_post_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProviderOrganizationsPostDeleteError {
    UnknownValue(serde_json::Value),
}

pub async fn provider_organizations_add(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    provider_organization_add_request_model: Option<models::ProviderOrganizationAddRequestModel>,
) -> Result<(), Error<ProviderOrganizationsAddError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_provider_organization_add_request_model = provider_organization_add_request_model;

    let uri_str = format!(
        "{}/providers/{providerId}/organizations/add",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_provider_organization_add_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProviderOrganizationsAddError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn provider_organizations_delete(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<ProviderOrganizationsDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_id = id;

    let uri_str = format!(
        "{}/providers/{providerId}/organizations/{id}",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProviderOrganizationsDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn provider_organizations_get(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
) -> Result<
    models::ProviderOrganizationOrganizationDetailsResponseModelListResponseModel,
    Error<ProviderOrganizationsGetError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;

    let uri_str = format!(
        "{}/providers/{providerId}/organizations",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ProviderOrganizationOrganizationDetailsResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ProviderOrganizationOrganizationDetailsResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ProviderOrganizationsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn provider_organizations_post(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    provider_organization_create_request_model: Option<
        models::ProviderOrganizationCreateRequestModel,
    >,
) -> Result<models::ProviderOrganizationResponseModel, Error<ProviderOrganizationsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_provider_organization_create_request_model = provider_organization_create_request_model;

    let uri_str = format!(
        "{}/providers/{providerId}/organizations",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_provider_organization_create_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::ProviderOrganizationResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::ProviderOrganizationResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<ProviderOrganizationsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn provider_organizations_post_delete(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<ProviderOrganizationsPostDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_id = id;

    let uri_str = format!(
        "{}/providers/{providerId}/organizations/{id}/delete",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProviderOrganizationsPostDeleteError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

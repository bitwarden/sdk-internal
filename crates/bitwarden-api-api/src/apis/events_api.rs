/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;

use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};

use super::{Error, configuration};
use crate::{
    apis::{ContentType, ResponseContent},
    models,
};

#[cfg_attr(feature = "mockall", automock)]
#[cfg_attr(target_arch = "wasm32", async_trait(?Send))]
#[cfg_attr(not(target_arch = "wasm32"), async_trait)]
pub trait EventsApi: Send + Sync {
    /// GET /ciphers/{id}/events
    async fn get_cipher<'a>(
        &self,
        id: &'a str,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetCipherError>>;

    /// GET /organizations/{id}/events
    async fn get_organization<'a>(
        &self,
        id: &'a str,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetOrganizationError>>;

    /// GET /organizations/{orgId}/users/{id}/events
    async fn get_organization_user<'a>(
        &self,
        org_id: &'a str,
        id: &'a str,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetOrganizationUserError>>;

    /// GET /organization/{orgId}/projects/{id}/events
    async fn get_projects<'a>(
        &self,
        id: uuid::Uuid,
        org_id: uuid::Uuid,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetProjectsError>>;

    /// GET /providers/{providerId}/events
    async fn get_provider<'a>(
        &self,
        provider_id: uuid::Uuid,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetProviderError>>;

    /// GET /providers/{providerId}/users/{id}/events
    async fn get_provider_user<'a>(
        &self,
        provider_id: uuid::Uuid,
        id: uuid::Uuid,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetProviderUserError>>;

    /// GET /organization/{orgId}/secrets/{id}/events
    async fn get_secrets<'a>(
        &self,
        id: uuid::Uuid,
        org_id: uuid::Uuid,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetSecretsError>>;

    /// GET /organization/{orgId}/service-account/{id}/events
    async fn get_service_accounts<'a>(
        &self,
        org_id: uuid::Uuid,
        id: uuid::Uuid,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetServiceAccountsError>>;

    /// GET /events
    async fn get_user<'a>(
        &self,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetUserError>>;
}

pub struct EventsApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl EventsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

#[cfg_attr(target_arch = "wasm32", async_trait(?Send))]
#[cfg_attr(not(target_arch = "wasm32"), async_trait)]
impl EventsApi for EventsApiClient {
    async fn get_cipher<'a>(
        &self,
        id: &'a str,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetCipherError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/ciphers/{id}/events",
            local_var_configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref param_value) = start {
            local_var_req_builder =
                local_var_req_builder.query(&[("start", &param_value.to_string())]);
        }
        if let Some(ref param_value) = end {
            local_var_req_builder =
                local_var_req_builder.query(&[("end", &param_value.to_string())]);
        }
        if let Some(ref param_value) = continuation_token {
            local_var_req_builder =
                local_var_req_builder.query(&[("continuationToken", &param_value.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to `models::EventResponseModelListResponseModel`",
                    )));
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be converted to `models::EventResponseModelListResponseModel`"
                    ))));
                }
            }
        } else {
            let local_var_entity: Option<GetCipherError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_organization<'a>(
        &self,
        id: &'a str,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetOrganizationError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/organizations/{id}/events",
            local_var_configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref param_value) = start {
            local_var_req_builder =
                local_var_req_builder.query(&[("start", &param_value.to_string())]);
        }
        if let Some(ref param_value) = end {
            local_var_req_builder =
                local_var_req_builder.query(&[("end", &param_value.to_string())]);
        }
        if let Some(ref param_value) = continuation_token {
            local_var_req_builder =
                local_var_req_builder.query(&[("continuationToken", &param_value.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to `models::EventResponseModelListResponseModel`",
                    )));
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be converted to `models::EventResponseModelListResponseModel`"
                    ))));
                }
            }
        } else {
            let local_var_entity: Option<GetOrganizationError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_organization_user<'a>(
        &self,
        org_id: &'a str,
        id: &'a str,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetOrganizationUserError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/organizations/{orgId}/users/{id}/events",
            local_var_configuration.base_path,
            orgId = crate::apis::urlencode(org_id),
            id = crate::apis::urlencode(id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref param_value) = start {
            local_var_req_builder =
                local_var_req_builder.query(&[("start", &param_value.to_string())]);
        }
        if let Some(ref param_value) = end {
            local_var_req_builder =
                local_var_req_builder.query(&[("end", &param_value.to_string())]);
        }
        if let Some(ref param_value) = continuation_token {
            local_var_req_builder =
                local_var_req_builder.query(&[("continuationToken", &param_value.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to `models::EventResponseModelListResponseModel`",
                    )));
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be converted to `models::EventResponseModelListResponseModel`"
                    ))));
                }
            }
        } else {
            let local_var_entity: Option<GetOrganizationUserError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_projects<'a>(
        &self,
        id: uuid::Uuid,
        org_id: uuid::Uuid,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetProjectsError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/organization/{orgId}/projects/{id}/events",
            local_var_configuration.base_path,
            id = id,
            orgId = org_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref param_value) = start {
            local_var_req_builder =
                local_var_req_builder.query(&[("start", &param_value.to_string())]);
        }
        if let Some(ref param_value) = end {
            local_var_req_builder =
                local_var_req_builder.query(&[("end", &param_value.to_string())]);
        }
        if let Some(ref param_value) = continuation_token {
            local_var_req_builder =
                local_var_req_builder.query(&[("continuationToken", &param_value.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to `models::EventResponseModelListResponseModel`",
                    )));
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be converted to `models::EventResponseModelListResponseModel`"
                    ))));
                }
            }
        } else {
            let local_var_entity: Option<GetProjectsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_provider<'a>(
        &self,
        provider_id: uuid::Uuid,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetProviderError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/providers/{providerId}/events",
            local_var_configuration.base_path,
            providerId = provider_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref param_value) = start {
            local_var_req_builder =
                local_var_req_builder.query(&[("start", &param_value.to_string())]);
        }
        if let Some(ref param_value) = end {
            local_var_req_builder =
                local_var_req_builder.query(&[("end", &param_value.to_string())]);
        }
        if let Some(ref param_value) = continuation_token {
            local_var_req_builder =
                local_var_req_builder.query(&[("continuationToken", &param_value.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to `models::EventResponseModelListResponseModel`",
                    )));
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be converted to `models::EventResponseModelListResponseModel`"
                    ))));
                }
            }
        } else {
            let local_var_entity: Option<GetProviderError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_provider_user<'a>(
        &self,
        provider_id: uuid::Uuid,
        id: uuid::Uuid,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetProviderUserError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/providers/{providerId}/users/{id}/events",
            local_var_configuration.base_path,
            providerId = provider_id,
            id = id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref param_value) = start {
            local_var_req_builder =
                local_var_req_builder.query(&[("start", &param_value.to_string())]);
        }
        if let Some(ref param_value) = end {
            local_var_req_builder =
                local_var_req_builder.query(&[("end", &param_value.to_string())]);
        }
        if let Some(ref param_value) = continuation_token {
            local_var_req_builder =
                local_var_req_builder.query(&[("continuationToken", &param_value.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to `models::EventResponseModelListResponseModel`",
                    )));
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be converted to `models::EventResponseModelListResponseModel`"
                    ))));
                }
            }
        } else {
            let local_var_entity: Option<GetProviderUserError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_secrets<'a>(
        &self,
        id: uuid::Uuid,
        org_id: uuid::Uuid,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetSecretsError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/organization/{orgId}/secrets/{id}/events",
            local_var_configuration.base_path,
            id = id,
            orgId = org_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref param_value) = start {
            local_var_req_builder =
                local_var_req_builder.query(&[("start", &param_value.to_string())]);
        }
        if let Some(ref param_value) = end {
            local_var_req_builder =
                local_var_req_builder.query(&[("end", &param_value.to_string())]);
        }
        if let Some(ref param_value) = continuation_token {
            local_var_req_builder =
                local_var_req_builder.query(&[("continuationToken", &param_value.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to `models::EventResponseModelListResponseModel`",
                    )));
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be converted to `models::EventResponseModelListResponseModel`"
                    ))));
                }
            }
        } else {
            let local_var_entity: Option<GetSecretsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_service_accounts<'a>(
        &self,
        org_id: uuid::Uuid,
        id: uuid::Uuid,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetServiceAccountsError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/organization/{orgId}/service-account/{id}/events",
            local_var_configuration.base_path,
            orgId = org_id,
            id = id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref param_value) = start {
            local_var_req_builder =
                local_var_req_builder.query(&[("start", &param_value.to_string())]);
        }
        if let Some(ref param_value) = end {
            local_var_req_builder =
                local_var_req_builder.query(&[("end", &param_value.to_string())]);
        }
        if let Some(ref param_value) = continuation_token {
            local_var_req_builder =
                local_var_req_builder.query(&[("continuationToken", &param_value.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to `models::EventResponseModelListResponseModel`",
                    )));
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be converted to `models::EventResponseModelListResponseModel`"
                    ))));
                }
            }
        } else {
            let local_var_entity: Option<GetServiceAccountsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_user<'a>(
        &self,
        start: Option<String>,
        end: Option<String>,
        continuation_token: Option<&'a str>,
    ) -> Result<models::EventResponseModelListResponseModel, Error<GetUserError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/events", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref param_value) = start {
            local_var_req_builder =
                local_var_req_builder.query(&[("start", &param_value.to_string())]);
        }
        if let Some(ref param_value) = end {
            local_var_req_builder =
                local_var_req_builder.query(&[("end", &param_value.to_string())]);
        }
        if let Some(ref param_value) = continuation_token {
            local_var_req_builder =
                local_var_req_builder.query(&[("continuationToken", &param_value.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to `models::EventResponseModelListResponseModel`",
                    )));
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be converted to `models::EventResponseModelListResponseModel`"
                    ))));
                }
            }
        } else {
            let local_var_entity: Option<GetUserError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`EventsApi::get_cipher`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCipherError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`EventsApi::get_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`EventsApi::get_organization_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOrganizationUserError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`EventsApi::get_projects`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProjectsError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`EventsApi::get_provider`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProviderError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`EventsApi::get_provider_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProviderUserError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`EventsApi::get_secrets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSecretsError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`EventsApi::get_service_accounts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetServiceAccountsError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`EventsApi::get_user`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUserError {
    UnknownValue(serde_json::Value),
}

/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;

use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};

use super::{Error, configuration};
use crate::{
    apis::{ContentType, ResponseContent},
    models,
};

#[cfg_attr(feature = "mockall", automock)]
#[async_trait(?Send)]
pub trait ProviderBillingApi: Send + Sync {
    /// GET /providers/{providerId}/billing/invoices/{invoiceId}
    async fn generate_client_invoice_report<'a>(
        &self,
        provider_id: uuid::Uuid,
        invoice_id: &'a str,
    ) -> Result<(), Error<GenerateClientInvoiceReportError>>;

    /// GET /providers/{providerId}/billing/invoices
    async fn get_invoices<'a>(
        &self,
        provider_id: uuid::Uuid,
    ) -> Result<(), Error<GetInvoicesError>>;

    /// GET /providers/{providerId}/billing/subscription
    async fn get_subscription<'a>(
        &self,
        provider_id: uuid::Uuid,
    ) -> Result<(), Error<GetSubscriptionError>>;

    /// GET /providers/{providerId}/billing/tax-information
    async fn get_tax_information<'a>(
        &self,
        provider_id: uuid::Uuid,
    ) -> Result<(), Error<GetTaxInformationError>>;

    /// PUT /providers/{providerId}/billing/payment-method
    async fn update_payment_method<'a>(
        &self,
        provider_id: uuid::Uuid,
        update_payment_method_request_body: Option<models::UpdatePaymentMethodRequestBody>,
    ) -> Result<(), Error<UpdatePaymentMethodError>>;

    /// PUT /providers/{providerId}/billing/tax-information
    async fn update_tax_information<'a>(
        &self,
        provider_id: uuid::Uuid,
        tax_information_request_body: Option<models::TaxInformationRequestBody>,
    ) -> Result<(), Error<UpdateTaxInformationError>>;

    /// POST /providers/{providerId}/billing/payment-method/verify-bank-account
    async fn verify_bank_account<'a>(
        &self,
        provider_id: uuid::Uuid,
        verify_bank_account_request_body: Option<models::VerifyBankAccountRequestBody>,
    ) -> Result<(), Error<VerifyBankAccountError>>;
}

pub struct ProviderBillingApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl ProviderBillingApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

#[async_trait(?Send)]
impl ProviderBillingApi for ProviderBillingApiClient {
    async fn generate_client_invoice_report<'a>(
        &self,
        provider_id: uuid::Uuid,
        invoice_id: &'a str,
    ) -> Result<(), Error<GenerateClientInvoiceReportError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/providers/{providerId}/billing/invoices/{invoiceId}",
            local_var_configuration.base_path,
            providerId = provider_id,
            invoiceId = crate::apis::urlencode(invoice_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<GenerateClientInvoiceReportError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_invoices<'a>(
        &self,
        provider_id: uuid::Uuid,
    ) -> Result<(), Error<GetInvoicesError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/providers/{providerId}/billing/invoices",
            local_var_configuration.base_path,
            providerId = provider_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<GetInvoicesError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_subscription<'a>(
        &self,
        provider_id: uuid::Uuid,
    ) -> Result<(), Error<GetSubscriptionError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/providers/{providerId}/billing/subscription",
            local_var_configuration.base_path,
            providerId = provider_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<GetSubscriptionError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_tax_information<'a>(
        &self,
        provider_id: uuid::Uuid,
    ) -> Result<(), Error<GetTaxInformationError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/providers/{providerId}/billing/tax-information",
            local_var_configuration.base_path,
            providerId = provider_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<GetTaxInformationError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn update_payment_method<'a>(
        &self,
        provider_id: uuid::Uuid,
        update_payment_method_request_body: Option<models::UpdatePaymentMethodRequestBody>,
    ) -> Result<(), Error<UpdatePaymentMethodError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/providers/{providerId}/billing/payment-method",
            local_var_configuration.base_path,
            providerId = provider_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&update_payment_method_request_body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<UpdatePaymentMethodError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn update_tax_information<'a>(
        &self,
        provider_id: uuid::Uuid,
        tax_information_request_body: Option<models::TaxInformationRequestBody>,
    ) -> Result<(), Error<UpdateTaxInformationError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/providers/{providerId}/billing/tax-information",
            local_var_configuration.base_path,
            providerId = provider_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&tax_information_request_body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<UpdateTaxInformationError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn verify_bank_account<'a>(
        &self,
        provider_id: uuid::Uuid,
        verify_bank_account_request_body: Option<models::VerifyBankAccountRequestBody>,
    ) -> Result<(), Error<VerifyBankAccountError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/providers/{providerId}/billing/payment-method/verify-bank-account",
            local_var_configuration.base_path,
            providerId = provider_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&verify_bank_account_request_body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<VerifyBankAccountError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`ProviderBillingApi::generate_client_invoice_report`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GenerateClientInvoiceReportError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`ProviderBillingApi::get_invoices`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInvoicesError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`ProviderBillingApi::get_subscription`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSubscriptionError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`ProviderBillingApi::get_tax_information`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTaxInformationError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`ProviderBillingApi::update_payment_method`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdatePaymentMethodError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`ProviderBillingApi::update_tax_information`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateTaxInformationError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`ProviderBillingApi::verify_bank_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum VerifyBankAccountError {
    UnknownValue(serde_json::Value),
}

/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`providers_provider_id_clients_addable_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdClientsAddableGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_clients_existing_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdClientsExistingPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_clients_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdClientsPostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`providers_provider_id_clients_provider_organization_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProvidersProviderIdClientsProviderOrganizationIdPutError {
    UnknownValue(serde_json::Value),
}

pub async fn providers_provider_id_clients_addable_get(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
) -> Result<(), Error<ProvidersProviderIdClientsAddableGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;

    let uri_str = format!(
        "{}/providers/{providerId}/clients/addable",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdClientsAddableGetError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_clients_existing_post(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    add_existing_organization_request_body: Option<models::AddExistingOrganizationRequestBody>,
) -> Result<(), Error<ProvidersProviderIdClientsExistingPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_add_existing_organization_request_body = add_existing_organization_request_body;

    let uri_str = format!(
        "{}/providers/{providerId}/clients/existing",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_add_existing_organization_request_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdClientsExistingPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_clients_post(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    create_client_organization_request_body: Option<models::CreateClientOrganizationRequestBody>,
) -> Result<(), Error<ProvidersProviderIdClientsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_create_client_organization_request_body = create_client_organization_request_body;

    let uri_str = format!(
        "{}/providers/{providerId}/clients",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_create_client_organization_request_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdClientsPostError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn providers_provider_id_clients_provider_organization_id_put(
    configuration: &configuration::Configuration,
    provider_id: uuid::Uuid,
    provider_organization_id: uuid::Uuid,
    update_client_organization_request_body: Option<models::UpdateClientOrganizationRequestBody>,
) -> Result<(), Error<ProvidersProviderIdClientsProviderOrganizationIdPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_provider_id = provider_id;
    let p_provider_organization_id = provider_organization_id;
    let p_update_client_organization_request_body = update_client_organization_request_body;

    let uri_str = format!(
        "{}/providers/{providerId}/clients/{providerOrganizationId}",
        configuration.base_path,
        providerId = crate::apis::urlencode(p_provider_id.to_string()),
        providerOrganizationId = crate::apis::urlencode(p_provider_organization_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_update_client_organization_request_body);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ProvidersProviderIdClientsProviderOrganizationIdPutError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;

use async_trait::async_trait;
#[cfg(feature = "mockall")]
use mockall::automock;
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, Error};
use crate::{
    apis::{ContentType, ResponseContent},
    models,
};

#[cfg_attr(feature = "mockall", automock)]
#[async_trait(?Send)]
pub trait ProviderClientsApi: Send + Sync {
    /// POST /providers/{providerId}/clients/existing
    async fn add_existing_organization<'a>(
        &self,
        provider_id: uuid::Uuid,
        add_existing_organization_request_body: Option<models::AddExistingOrganizationRequestBody>,
    ) -> Result<(), Error<AddExistingOrganizationError>>;

    /// POST /providers/{providerId}/clients
    async fn create<'a>(
        &self,
        provider_id: uuid::Uuid,
        create_client_organization_request_body: Option<
            models::CreateClientOrganizationRequestBody,
        >,
    ) -> Result<(), Error<CreateError>>;

    /// GET /providers/{providerId}/clients/addable
    async fn get_addable_organizations<'a>(
        &self,
        provider_id: uuid::Uuid,
    ) -> Result<(), Error<GetAddableOrganizationsError>>;

    /// PUT /providers/{providerId}/clients/{providerOrganizationId}
    async fn update<'a>(
        &self,
        provider_id: uuid::Uuid,
        provider_organization_id: uuid::Uuid,
        update_client_organization_request_body: Option<
            models::UpdateClientOrganizationRequestBody,
        >,
    ) -> Result<(), Error<UpdateError>>;
}

pub struct ProviderClientsApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl ProviderClientsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

#[async_trait(?Send)]
impl ProviderClientsApi for ProviderClientsApiClient {
    async fn add_existing_organization<'a>(
        &self,
        provider_id: uuid::Uuid,
        add_existing_organization_request_body: Option<models::AddExistingOrganizationRequestBody>,
    ) -> Result<(), Error<AddExistingOrganizationError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/providers/{providerId}/clients/existing",
            local_var_configuration.base_path,
            providerId = provider_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder = local_var_req_builder.json(&add_existing_organization_request_body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<AddExistingOrganizationError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn create<'a>(
        &self,
        provider_id: uuid::Uuid,
        create_client_organization_request_body: Option<
            models::CreateClientOrganizationRequestBody,
        >,
    ) -> Result<(), Error<CreateError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/providers/{providerId}/clients",
            local_var_configuration.base_path,
            providerId = provider_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder =
            local_var_req_builder.json(&create_client_organization_request_body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<CreateError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn get_addable_organizations<'a>(
        &self,
        provider_id: uuid::Uuid,
    ) -> Result<(), Error<GetAddableOrganizationsError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/providers/{providerId}/clients/addable",
            local_var_configuration.base_path,
            providerId = provider_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<GetAddableOrganizationsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn update<'a>(
        &self,
        provider_id: uuid::Uuid,
        provider_organization_id: uuid::Uuid,
        update_client_organization_request_body: Option<
            models::UpdateClientOrganizationRequestBody,
        >,
    ) -> Result<(), Error<UpdateError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/providers/{providerId}/clients/{providerOrganizationId}",
            local_var_configuration.base_path,
            providerId = provider_id,
            providerOrganizationId = provider_organization_id
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
            local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
        };
        local_var_req_builder =
            local_var_req_builder.json(&update_client_organization_request_body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<UpdateError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`ProviderClientsApi::add_existing_organization`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddExistingOrganizationError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`ProviderClientsApi::create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`ProviderClientsApi::get_addable_organizations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAddableOrganizationsError {
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`ProviderClientsApi::update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateError {
    UnknownValue(serde_json::Value),
}

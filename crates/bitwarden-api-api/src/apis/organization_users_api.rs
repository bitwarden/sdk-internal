/*
 * Bitwarden Internal API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: latest
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`organization_users_accept`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersAcceptError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_accept_init`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersAcceptInitError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_bulk_confirm`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersBulkConfirmError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_bulk_delete_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersBulkDeleteAccountError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_bulk_enable_secrets_manager`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersBulkEnableSecretsManagerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_bulk_reinvite`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersBulkReinviteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_bulk_remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersBulkRemoveError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_bulk_restore`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersBulkRestoreError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_bulk_revoke`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersBulkRevokeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_confirm`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersConfirmError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_delete_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersDeleteAccountError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_get_account_recovery_details`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersGetAccountRecoveryDetailsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_get_all`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersGetAllError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_get_mini_details`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersGetMiniDetailsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_get_reset_password_details`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersGetResetPasswordDetailsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_invite`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersInviteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_patch_bulk_enable_secrets_manager`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersPatchBulkEnableSecretsManagerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_patch_bulk_restore`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersPatchBulkRestoreError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_patch_bulk_revoke`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersPatchBulkRevokeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_patch_restore`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersPatchRestoreError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_patch_revoke`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersPatchRevokeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_post_bulk_delete_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersPostBulkDeleteAccountError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_post_bulk_remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersPostBulkRemoveError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_post_delete_account`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersPostDeleteAccountError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_post_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersPostPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_post_remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersPostRemoveError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersPutError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_put_reset_password`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersPutResetPasswordError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_put_reset_password_enrollment`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersPutResetPasswordEnrollmentError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_reinvite`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersReinviteError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersRemoveError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_restore`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersRestoreError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_revoke`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersRevokeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`organization_users_user_public_keys`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrganizationUsersUserPublicKeysError {
    UnknownValue(serde_json::Value),
}

pub async fn organization_users_accept(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_id: uuid::Uuid,
    organization_user_accept_request_model: Option<models::OrganizationUserAcceptRequestModel>,
) -> Result<(), Error<OrganizationUsersAcceptError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_id = organization_user_id;
    let p_organization_user_accept_request_model = organization_user_accept_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{organizationUserId}/accept",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        organizationUserId = crate::apis::urlencode(p_organization_user_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_accept_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersAcceptError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_accept_init(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_id: uuid::Uuid,
    organization_user_accept_init_request_model: Option<
        models::OrganizationUserAcceptInitRequestModel,
    >,
) -> Result<(), Error<OrganizationUsersAcceptInitError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_id = organization_user_id;
    let p_organization_user_accept_init_request_model = organization_user_accept_init_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{organizationUserId}/accept-init",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        organizationUserId = crate::apis::urlencode(p_organization_user_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_accept_init_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersAcceptInitError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_bulk_confirm(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_confirm_request_model: Option<
        models::OrganizationUserBulkConfirmRequestModel,
    >,
) -> Result<
    models::OrganizationUserBulkResponseModelListResponseModel,
    Error<OrganizationUsersBulkConfirmError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_confirm_request_model =
        organization_user_bulk_confirm_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/confirm",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_confirm_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersBulkConfirmError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_bulk_delete_account(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_request_model: Option<models::OrganizationUserBulkRequestModel>,
) -> Result<
    models::OrganizationUserBulkResponseModelListResponseModel,
    Error<OrganizationUsersBulkDeleteAccountError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_request_model = organization_user_bulk_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/delete-account",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersBulkDeleteAccountError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_bulk_enable_secrets_manager(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_request_model: Option<models::OrganizationUserBulkRequestModel>,
) -> Result<(), Error<OrganizationUsersBulkEnableSecretsManagerError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_request_model = organization_user_bulk_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/enable-secrets-manager",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersBulkEnableSecretsManagerError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_bulk_reinvite(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_request_model: Option<models::OrganizationUserBulkRequestModel>,
) -> Result<
    models::OrganizationUserBulkResponseModelListResponseModel,
    Error<OrganizationUsersBulkReinviteError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_request_model = organization_user_bulk_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/reinvite",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersBulkReinviteError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_bulk_remove(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_request_model: Option<models::OrganizationUserBulkRequestModel>,
) -> Result<
    models::OrganizationUserBulkResponseModelListResponseModel,
    Error<OrganizationUsersBulkRemoveError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_request_model = organization_user_bulk_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersBulkRemoveError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_bulk_restore(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_request_model: Option<models::OrganizationUserBulkRequestModel>,
) -> Result<
    models::OrganizationUserBulkResponseModelListResponseModel,
    Error<OrganizationUsersBulkRestoreError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_request_model = organization_user_bulk_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/restore",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersBulkRestoreError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_bulk_revoke(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_request_model: Option<models::OrganizationUserBulkRequestModel>,
) -> Result<
    models::OrganizationUserBulkResponseModelListResponseModel,
    Error<OrganizationUsersBulkRevokeError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_request_model = organization_user_bulk_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/revoke",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersBulkRevokeError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_confirm(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
    organization_user_confirm_request_model: Option<models::OrganizationUserConfirmRequestModel>,
) -> Result<(), Error<OrganizationUsersConfirmError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;
    let p_organization_user_confirm_request_model = organization_user_confirm_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}/confirm",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_confirm_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersConfirmError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_delete_account(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<OrganizationUsersDeleteAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}/delete-account",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersDeleteAccountError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_get(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
    include_groups: Option<bool>,
) -> Result<models::OrganizationUserDetailsResponseModel, Error<OrganizationUsersGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;
    let p_include_groups = include_groups;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_include_groups {
        req_builder = req_builder.query(&[("includeGroups", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserDetailsResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserDetailsResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_get_account_recovery_details(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_request_model: Option<models::OrganizationUserBulkRequestModel>,
) -> Result<
    models::OrganizationUserResetPasswordDetailsResponseModelListResponseModel,
    Error<OrganizationUsersGetAccountRecoveryDetailsError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_request_model = organization_user_bulk_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/account-recovery-details",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserResetPasswordDetailsResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserResetPasswordDetailsResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersGetAccountRecoveryDetailsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_get_all(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    include_groups: Option<bool>,
    include_collections: Option<bool>,
) -> Result<
    models::OrganizationUserUserDetailsResponseModelListResponseModel,
    Error<OrganizationUsersGetAllError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_include_groups = include_groups;
    let p_include_collections = include_collections;

    let uri_str = format!(
        "{}/organizations/{orgId}/users",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_include_groups {
        req_builder = req_builder.query(&[("includeGroups", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_include_collections {
        req_builder = req_builder.query(&[("includeCollections", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserUserDetailsResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserUserDetailsResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersGetAllError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_get_mini_details(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
) -> Result<
    models::OrganizationUserUserMiniDetailsResponseModelListResponseModel,
    Error<OrganizationUsersGetMiniDetailsError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/mini-details",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserUserMiniDetailsResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserUserMiniDetailsResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersGetMiniDetailsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_get_reset_password_details(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<
    models::OrganizationUserResetPasswordDetailsResponseModel,
    Error<OrganizationUsersGetResetPasswordDetailsError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}/reset-password-details",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserResetPasswordDetailsResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserResetPasswordDetailsResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersGetResetPasswordDetailsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_invite(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_invite_request_model: Option<models::OrganizationUserInviteRequestModel>,
) -> Result<(), Error<OrganizationUsersInviteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_invite_request_model = organization_user_invite_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/invite",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_invite_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersInviteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_patch_bulk_enable_secrets_manager(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_request_model: Option<models::OrganizationUserBulkRequestModel>,
) -> Result<(), Error<OrganizationUsersPatchBulkEnableSecretsManagerError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_request_model = organization_user_bulk_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/enable-secrets-manager",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersPatchBulkEnableSecretsManagerError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_patch_bulk_restore(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_request_model: Option<models::OrganizationUserBulkRequestModel>,
) -> Result<
    models::OrganizationUserBulkResponseModelListResponseModel,
    Error<OrganizationUsersPatchBulkRestoreError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_request_model = organization_user_bulk_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/restore",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersPatchBulkRestoreError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_patch_bulk_revoke(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_request_model: Option<models::OrganizationUserBulkRequestModel>,
) -> Result<
    models::OrganizationUserBulkResponseModelListResponseModel,
    Error<OrganizationUsersPatchBulkRevokeError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_request_model = organization_user_bulk_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/revoke",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersPatchBulkRevokeError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_patch_restore(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<OrganizationUsersPatchRestoreError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}/restore",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersPatchRestoreError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_patch_revoke(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<OrganizationUsersPatchRevokeError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}/revoke",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersPatchRevokeError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_post_bulk_delete_account(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_request_model: Option<models::OrganizationUserBulkRequestModel>,
) -> Result<
    models::OrganizationUserBulkResponseModelListResponseModel,
    Error<OrganizationUsersPostBulkDeleteAccountError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_request_model = organization_user_bulk_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/delete-account",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersPostBulkDeleteAccountError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_post_bulk_remove(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_request_model: Option<models::OrganizationUserBulkRequestModel>,
) -> Result<
    models::OrganizationUserBulkResponseModelListResponseModel,
    Error<OrganizationUsersPostBulkRemoveError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_request_model = organization_user_bulk_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/remove",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserBulkResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersPostBulkRemoveError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_post_delete_account(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<OrganizationUsersPostDeleteAccountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}/delete-account",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersPostDeleteAccountError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_post_put(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
    organization_user_update_request_model: Option<models::OrganizationUserUpdateRequestModel>,
) -> Result<(), Error<OrganizationUsersPostPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;
    let p_organization_user_update_request_model = organization_user_update_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_update_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersPostPutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_post_remove(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<OrganizationUsersPostRemoveError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}/remove",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersPostRemoveError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_put(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
    organization_user_update_request_model: Option<models::OrganizationUserUpdateRequestModel>,
) -> Result<(), Error<OrganizationUsersPutError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;
    let p_organization_user_update_request_model = organization_user_update_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_update_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersPutError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_put_reset_password(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
    organization_user_reset_password_request_model: Option<
        models::OrganizationUserResetPasswordRequestModel,
    >,
) -> Result<(), Error<OrganizationUsersPutResetPasswordError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;
    let p_organization_user_reset_password_request_model =
        organization_user_reset_password_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}/reset-password",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_reset_password_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersPutResetPasswordError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_put_reset_password_enrollment(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    user_id: uuid::Uuid,
    organization_user_reset_password_enrollment_request_model: Option<
        models::OrganizationUserResetPasswordEnrollmentRequestModel,
    >,
) -> Result<(), Error<OrganizationUsersPutResetPasswordEnrollmentError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_user_id = user_id;
    let p_organization_user_reset_password_enrollment_request_model =
        organization_user_reset_password_enrollment_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{userId}/reset-password-enrollment",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        userId = crate::apis::urlencode(p_user_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_reset_password_enrollment_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersPutResetPasswordEnrollmentError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_reinvite(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<OrganizationUsersReinviteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}/reinvite",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersReinviteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_remove(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<OrganizationUsersRemoveError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersRemoveError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_restore(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<OrganizationUsersRestoreError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}/restore",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersRestoreError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_revoke(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    id: uuid::Uuid,
) -> Result<(), Error<OrganizationUsersRevokeError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_id = id;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/{id}/revoke",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string()),
        id = crate::apis::urlencode(p_id.to_string())
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersRevokeError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn organization_users_user_public_keys(
    configuration: &configuration::Configuration,
    org_id: uuid::Uuid,
    organization_user_bulk_request_model: Option<models::OrganizationUserBulkRequestModel>,
) -> Result<
    models::OrganizationUserPublicKeyResponseModelListResponseModel,
    Error<OrganizationUsersUserPublicKeysError>,
> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_org_id = org_id;
    let p_organization_user_bulk_request_model = organization_user_bulk_request_model;

    let uri_str = format!(
        "{}/organizations/{orgId}/users/public-keys",
        configuration.base_path,
        orgId = crate::apis::urlencode(p_org_id.to_string())
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.oauth_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_organization_user_bulk_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::OrganizationUserPublicKeyResponseModelListResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::OrganizationUserPublicKeyResponseModelListResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<OrganizationUsersUserPublicKeysError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

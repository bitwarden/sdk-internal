/*
 * Bitwarden Identity
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`sso_external_callback`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SsoExternalCallbackError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sso_external_challenge`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SsoExternalChallengeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sso_login`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SsoLoginError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sso_pre_validate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SsoPreValidateError {
    UnknownValue(serde_json::Value),
}

pub async fn sso_external_callback(
    configuration: &configuration::Configuration,
) -> Result<(), Error<SsoExternalCallbackError>> {
    let uri_str = format!("{}/sso/ExternalCallback", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<SsoExternalCallbackError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn sso_external_challenge(
    configuration: &configuration::Configuration,
    domain_hint: Option<&str>,
    return_url: Option<&str>,
    user_identifier: Option<&str>,
    sso_token: Option<&str>,
) -> Result<(), Error<SsoExternalChallengeError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_domain_hint = domain_hint;
    let p_return_url = return_url;
    let p_user_identifier = user_identifier;
    let p_sso_token = sso_token;

    let uri_str = format!("{}/sso/ExternalChallenge", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_domain_hint {
        req_builder = req_builder.query(&[("domainHint", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_return_url {
        req_builder = req_builder.query(&[("returnUrl", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_user_identifier {
        req_builder = req_builder.query(&[("userIdentifier", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_sso_token {
        req_builder = req_builder.query(&[("ssoToken", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<SsoExternalChallengeError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn sso_login(
    configuration: &configuration::Configuration,
    return_url: Option<&str>,
) -> Result<(), Error<SsoLoginError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_return_url = return_url;

    let uri_str = format!("{}/sso/Login", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_return_url {
        req_builder = req_builder.query(&[("returnUrl", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<SsoLoginError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn sso_pre_validate(
    configuration: &configuration::Configuration,
    domain_hint: Option<&str>,
) -> Result<(), Error<SsoPreValidateError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_domain_hint = domain_hint;

    let uri_str = format!("{}/sso/PreValidate", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_domain_hint {
        req_builder = req_builder.query(&[("domainHint", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<SsoPreValidateError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/*
 * Bitwarden Identity
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};

/// struct for typed errors of method [`accounts_get_web_authn_login_assertion_options`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountsGetWebAuthnLoginAssertionOptionsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`accounts_post_prelogin`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountsPostPreloginError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`accounts_post_register_finish`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountsPostRegisterFinishError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`accounts_post_register_send_verification_email`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountsPostRegisterSendVerificationEmailError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`accounts_post_register_verification_email_clicked`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountsPostRegisterVerificationEmailClickedError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`accounts_post_trial_initiation_send_verification_email`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AccountsPostTrialInitiationSendVerificationEmailError {
    UnknownValue(serde_json::Value),
}

pub async fn accounts_get_web_authn_login_assertion_options(
    configuration: &configuration::Configuration,
) -> Result<
    models::WebAuthnLoginAssertionOptionsResponseModel,
    Error<AccountsGetWebAuthnLoginAssertionOptionsError>,
> {
    let uri_str = format!(
        "{}/accounts/webauthn/assertion-options",
        configuration.base_path
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::WebAuthnLoginAssertionOptionsResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::WebAuthnLoginAssertionOptionsResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountsGetWebAuthnLoginAssertionOptionsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn accounts_post_prelogin(
    configuration: &configuration::Configuration,
    prelogin_request_model: Option<models::PreloginRequestModel>,
) -> Result<models::PreloginResponseModel, Error<AccountsPostPreloginError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_prelogin_request_model = prelogin_request_model;

    let uri_str = format!("{}/accounts/prelogin", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_prelogin_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::PreloginResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::PreloginResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountsPostPreloginError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn accounts_post_register_finish(
    configuration: &configuration::Configuration,
    register_finish_request_model: Option<models::RegisterFinishRequestModel>,
) -> Result<models::RegisterFinishResponseModel, Error<AccountsPostRegisterFinishError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_register_finish_request_model = register_finish_request_model;

    let uri_str = format!("{}/accounts/register/finish", configuration.base_path);
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_register_finish_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::RegisterFinishResponseModel`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::RegisterFinishResponseModel`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountsPostRegisterFinishError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn accounts_post_register_send_verification_email(
    configuration: &configuration::Configuration,
    register_send_verification_email_request_model: Option<
        models::RegisterSendVerificationEmailRequestModel,
    >,
) -> Result<(), Error<AccountsPostRegisterSendVerificationEmailError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_register_send_verification_email_request_model =
        register_send_verification_email_request_model;

    let uri_str = format!(
        "{}/accounts/register/send-verification-email",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_register_send_verification_email_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountsPostRegisterSendVerificationEmailError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn accounts_post_register_verification_email_clicked(
    configuration: &configuration::Configuration,
    register_verification_email_clicked_request_model: Option<
        models::RegisterVerificationEmailClickedRequestModel,
    >,
) -> Result<(), Error<AccountsPostRegisterVerificationEmailClickedError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_register_verification_email_clicked_request_model =
        register_verification_email_clicked_request_model;

    let uri_str = format!(
        "{}/accounts/register/verification-email-clicked",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_register_verification_email_clicked_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountsPostRegisterVerificationEmailClickedError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn accounts_post_trial_initiation_send_verification_email(
    configuration: &configuration::Configuration,
    trial_send_verification_email_request_model: Option<
        models::TrialSendVerificationEmailRequestModel,
    >,
) -> Result<(), Error<AccountsPostTrialInitiationSendVerificationEmailError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_trial_send_verification_email_request_model = trial_send_verification_email_request_model;

    let uri_str = format!(
        "{}/accounts/trial/send-verification-email",
        configuration.base_path
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    req_builder = req_builder.json(&p_trial_send_verification_email_request_model);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<AccountsPostTrialInitiationSendVerificationEmailError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/*
 * Bitwarden Identity
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RegisterFinishRequestModel {
    #[serde(rename = "email", alias = "Email")]
    pub email: Option<String>,
    #[serde(
        rename = "emailVerificationToken",
        alias = "EmailVerificationToken",
        skip_serializing_if = "Option::is_none"
    )]
    pub email_verification_token: Option<String>,
    #[serde(rename = "masterPasswordHash", alias = "MasterPasswordHash")]
    pub master_password_hash: Option<String>,
    #[serde(
        rename = "masterPasswordHint",
        alias = "MasterPasswordHint",
        skip_serializing_if = "Option::is_none"
    )]
    pub master_password_hint: Option<String>,
    #[serde(rename = "userSymmetricKey", alias = "UserSymmetricKey")]
    pub user_symmetric_key: Option<String>,
    #[serde(rename = "userAsymmetricKeys", alias = "UserAsymmetricKeys")]
    pub user_asymmetric_keys: Box<models::KeysRequestModel>,
    #[serde(rename = "kdf", alias = "Kdf")]
    pub kdf: models::KdfType,
    #[serde(rename = "kdfIterations", alias = "KdfIterations")]
    pub kdf_iterations: i32,
    #[serde(
        rename = "kdfMemory",
        alias = "KdfMemory",
        skip_serializing_if = "Option::is_none"
    )]
    pub kdf_memory: Option<i32>,
    #[serde(
        rename = "kdfParallelism",
        alias = "KdfParallelism",
        skip_serializing_if = "Option::is_none"
    )]
    pub kdf_parallelism: Option<i32>,
    #[serde(
        rename = "organizationUserId",
        alias = "OrganizationUserId",
        skip_serializing_if = "Option::is_none"
    )]
    pub organization_user_id: Option<uuid::Uuid>,
    #[serde(
        rename = "orgInviteToken",
        alias = "OrgInviteToken",
        skip_serializing_if = "Option::is_none"
    )]
    pub org_invite_token: Option<String>,
    #[serde(
        rename = "orgSponsoredFreeFamilyPlanToken",
        alias = "OrgSponsoredFreeFamilyPlanToken",
        skip_serializing_if = "Option::is_none"
    )]
    pub org_sponsored_free_family_plan_token: Option<String>,
    #[serde(
        rename = "acceptEmergencyAccessInviteToken",
        alias = "AcceptEmergencyAccessInviteToken",
        skip_serializing_if = "Option::is_none"
    )]
    pub accept_emergency_access_invite_token: Option<String>,
    #[serde(
        rename = "acceptEmergencyAccessId",
        alias = "AcceptEmergencyAccessId",
        skip_serializing_if = "Option::is_none"
    )]
    pub accept_emergency_access_id: Option<uuid::Uuid>,
    #[serde(
        rename = "providerInviteToken",
        alias = "ProviderInviteToken",
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_invite_token: Option<String>,
    #[serde(
        rename = "providerUserId",
        alias = "ProviderUserId",
        skip_serializing_if = "Option::is_none"
    )]
    pub provider_user_id: Option<uuid::Uuid>,
}

impl RegisterFinishRequestModel {
    pub fn new(
        email: Option<String>,
        master_password_hash: Option<String>,
        user_symmetric_key: Option<String>,
        user_asymmetric_keys: models::KeysRequestModel,
        kdf: models::KdfType,
        kdf_iterations: i32,
    ) -> RegisterFinishRequestModel {
        RegisterFinishRequestModel {
            email,
            email_verification_token: None,
            master_password_hash,
            master_password_hint: None,
            user_symmetric_key,
            user_asymmetric_keys: Box::new(user_asymmetric_keys),
            kdf,
            kdf_iterations,
            kdf_memory: None,
            kdf_parallelism: None,
            organization_user_id: None,
            org_invite_token: None,
            org_sponsored_free_family_plan_token: None,
            accept_emergency_access_invite_token: None,
            accept_emergency_access_id: None,
            provider_invite_token: None,
            provider_user_id: None,
        }
    }
}
